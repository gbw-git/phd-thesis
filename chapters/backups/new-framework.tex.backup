% !TEX root = ../main/thesis.tex
\documentclass[../main/thesis.tex]{subfiles}
\begin{document}

% \section{Substitution Programs}
% \begin{definition}
%   Let $L$ be a logic and $\tau$ be a vocabulary. For each $i > 0$ let $R_i$ be a
%   distinct relation symbol not in $\tau$ with arity $r_i$. We say a sequence of
%   formulas $\Phi := (\phi_1(\vec{y}_1), \ldots, \phi_k(\vec{y}_k))$ is a
%   \emph{substitution program} on $L$ if for each $i \in [k]$ we have that
%   $\phi_i$ is an $L[\tau_i]$-formula, where $\tau_i = \tau \uplus \{R_j : i < j
%   \leq k\}$, and each $\vec{y}_i$ has length $r_i$.
% \end{definition}

\section{A Framework for Operators and Quantifiers}

\subsection{Many-Sorted Interpretations}
We first need to generalise the notion of a many-sorted vocabulary in order to
include function symbols that are intended to be interpreted as number-valued
functions.

% \begin{definition}
%   Let $L$ be a logic ($\FO$ or $\FP$) and let $\tau$ be a many-sorted
%   vocabulary with function and constant symbols and $N: \fin \ra \fin[\tau]$
%   be a function that maps isomorphic structures to isomorphic structures. Let
%   $S = \{s_1, \ldots, s_q\}$ be the sorts in $\tau$. Let $\rho$ be a
%   vocabulary. Let $\tau \uplus \rho$ be the vocabulary formed by interpreting
%   $\rho$ as a many-sorted vocabulary with a single sort. We refer to the
%   single sort of $\rho$ as the \emph{element sort}. Let $L^{\tau, N}[\rho] =
%   L[\tau \uplus \rho]$ and for $\theta \in L^{\tau, N}[\rho]$ and $\mathcal{A}
%   \in \fin[\rho]$ let $\mathcal{A} \models_{L^{\tau, N}[\rho]} \theta$ if, and
%   only if, $(\mathcal{A} \uplus N(\mathcal{A})) \models_{L[\tau \uplus \rho]}
%   \theta$.
% \end{definition}

% Let $L^{\tau, N}[\rho]$ be a logic. We say $N$ is \emph{uniform} if for any
% $\mathcal{A}, \mathcal{B} \in \fin$ such that $\vert \mathcal{A} \vert = \vert
% \mathcal{B} \vert$ we have $N(\mathcal{A}) = N(\mathcal{B})$. In this case for
% each $n \in \nats$ we write $N(n)$ to abbreviate $N(\mathcal{A})$ for any
% $\mathcal{A} \in \fin$ of size $n$. We say $N$ is \emph{$\PT$-uniform} if $N$
% is uniform and $n \mapsto N(n)$ is computable in time polynomial in $n$.

\begin{definition}
  A \emph{many-sorted vocabulary with number-valued functions} is a tuple $\tau
  := (R, F, S, \zeta)$ where $R$ is a sequence of relation symbols, $F$ is a
  sequence of function symbols, $S$ is a sequence of sort symbols, and $\zeta$
  is a function that assigns each $H \in R \cup F$ of arity $h$ to a tuple of
  sort symbols $(s_1, \ldots, s_h)$.
\end{definition}

There is an obvious notion of a $\tau$-structure and isomorphism between
$\tau$-structures.

\begin{definition}
  Let $L$ be a logic with a number sort. Let $\rho$ be a vocabulary. Let $\tau =
  (R, F, S, \zeta)$ be a many-sorted vocabulary with number-valued functions,
  where $R = \{R_1, \ldots, R_{r}\}$, $F = \{ F_1, \ldots, F_{f} \}$, and $S =
  \{s_1, \ldots, s_{q}\}$. For each $i \in [r]$ and $j \in [f]$ let $r_i$ denWe now introduce the notion of a substitution program. A substitution program is
a finite sequence of formulas such that each formula may contain second-order
variables that correspond to formulas that come later in the sequence. The idea
is that a substitution program is a `compact' way of writing a formula, one that
allows formulas to repeatedly apply a formula without having to rewrite it each
time. We use substitution programs as a step towards our translation to
circuits. We also show that each substitution program can be translated to an
equivalent formula of an infinitary logic.

\begin{definition}
  Let $L$ be a logic and $\rho$ be a vocabulary. A $L[\rho]$-\emph{substitution
    program} is a sequence of formulas $\Phi := (\phi_1(\vec{y}_1, \vec{\mu}_1;
  \boldsymbol{V}_1), \ldots, \phi_k(\vec{y}_k, \vec{\mu}_i;\boldsymbol{V}_k))$,
  such that there is a sequence $V_1, \ldots, V_k$ of second-order variables and
  for each $i \in [k]$:
  \begin{itemize}
  \item $\phi_i$ is a formula in $L[\rho]$,
  \item $\vec{y}_i$ and $\vec{\mu}_i$ are sequences of element and number
    variables, respectively,
  \item $V_i$ has the same type as $(\vec{y}_i, \vec{\mu}_i)$, and
  \item $\boldsymbol{V}_i \subseteq \{V_j : i < j \leq k\}$.
  \end{itemize}
  The \emph{flattening} of a substitution program $\Phi$ is a formula
  $\phi(\vec{y}_1, \vec{\mu}_1)$ defined by taking $\phi_1$ and recursively
  replacing each second-order variable $V_i$ with the formula $\phi_i$. Let
  $\alpha$ be an assignment to the variables $\vec{y}_1$ and $\vec{\mu}_1$. Let
  $\mathcal{A} \in \fin[\tau]$. We write $\mathcal{A} \models \Phi[\alpha]$ to
  abbreviate $\mathcal{A} \models \phi[\alpha]$, where $\phi$ is the flattening
  of $\Phi$.

  The \emph{formula-length} of a substitution program $\Phi$ is the maximal
  length (i.e.\ number of symbols) of the formulas in $\Phi$. The \emph{width}
  of a substitution program is the maximum width of a formula appearing in the
  program.
\end{definition}

The proof of the following result follows from the standard `unrolling' of the
fixed-point operators. For more detail please see~\cite{}.

\begin{lem}
  Let $\setop$ be a set of generalised operators. Let $\setquant$ be the
  associated family of extended quantifiers. If a query can be defined in
  $\FP^{\nats} (\setop)$ then it can be defined by a $\PT$-uniform family of
  $\FO^{\nats} (\setop)$-substitution programs with a constant bound on the
  width and formula-length.
\end{lem}

% \begin{lem}
%   Let $\setop$ be a set of unrestricted operators. For each $n \in \nats$ let
%   $\setquant$ be the corresponding set of number domain non-uniform
%   number-domain non-quotienting quantifiers generated by $\setop$. Let
%   $\theta(\vec{x}, \vec{\mu}) \in \FO^{\nats} (\setop)$ be a formula defined
%   in terms of the mixed-sort relation variables $V_1, \ldots, V_k$. Let $m =
%   \vert \vec{\mu} \vert$ and for each $i \in [k]$ let $v_i$ be the arity of
%   the element sort and let $m_i$ be the arity of the number sort in $V_i$. Let
%   $n \in \nats$. For each $i \in [k]$ and $\vec{b} \in [n]^{m_i}$ we define an
%   element-sort relation variable $V_{\i, vec{b}}$ of arity $v_i$. There exists
%   a sequence of $\FO(\setquant)$ formulas $\{\theta_{\vec{a}}(\vec{x}) :
%   \vec{a} \in [n]^{m}\}$ where each $\theta_{\vec{a}}(\vec{x})$ is defined in
%   terms of the relation variables $\bigcup_{i \in [k]} \{V_{i, \vec{b}} :
%   \vec{b} \in [n]^{m_i}\}$.
% \end{lem}
% \begin{proof}
%   We say that a number term $\eta(\vec{y}, \vec{\nu})$ in
%   $\FO^{\nats}(\setop)$ has a \emph{translation for $n$} if there is a
%   sequence of $\FO(\setquant)$-formulas $(\phi^{\eta}_{n, k;
%   \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}$ such that for each
%   $\tau$-structure $\mathcal{A}$ of size $n$ and for each assignment $\alpha
%   \in [n]^{\vec{y}}$ we have that $\mathcal{A} \models \phi^{\eta}_{n, k;
%   \beta}[\alpha]$ if, and only if, $\mathcal{a} \models (\eta = k)[\alpha \cup
%   \beta]$.

%   We say a formula $\psi(\vec{y}, \vec{\nu})$ in $\FO^{\nats}(\setop)$ has a
%   \emph{translation for $n$} if there is a sequence of
%   $\FO(\setquant)$-formulas $(\phi_{n; \beta} (\vec{y}))_{\beta \in
%   [n]^{\vec{\mu}}}$ such that each $\tau$-structure $\mathcal{A}$ of size $n$
%   and each assignment $\alpha \in [n]^{\vec{y}}$, we have that $\mathcal{A}
%   \models \phi_{n; \vec{\beta}}[\alpha]$ if, and only if, $\mathcal{A} \models
%   \phi[\alpha \cup \beta]$.

%   We aim to show that $\theta(\vec{x}, \vec{\mu})$ has a \emph{translation for
%   $n$} by induction on the structure of the formula. It is easy to see that if
%   $\eta(\vec{y}, \vec{\nu})$ is a number variable or a constant (i.e. $0$ or
%   $1$) then $\eta$ has a translation for $n$. In the case that $\psi(\vec{y})$
%   is a formula is a formula containing no number terms then there is an
%   obvious translation for $n$. If $psi(\vec{y}, \vec{\nu}) = V_i(\vec{y},
%   \vec{\nu})$ then the assignment $\psi_{n; \beta}(\vec{y}) = V_{i,
%   \beta(\vec{\nu})}$ defines a translation.

%   Let $\eta(\vec{y}, \vec{\nu})$ be a number term and suppose all sub-formulas
%   and sub-number-terms of $\eta$ have a translation for $n$. Let $\beta \in
%   [n]^{\vec{\nu}}$. Suppose $\eta(\vec{y}, \vec{\nu}) = \eta_1(\vec{y}_1,
%   \vec{\nu}_1) \cdot \eta_2(\vec{y}_2, \vec{\nu}_2)$. Let $\beta_1 \in
%   [n]^{\vec{nu}_1}$ and $\beta_2 \in [n]^{\vec{nu}_2}$ be assignments
%   compatible with $\beta$. Let $\psi^{\eta}_{n, k ; \beta} (\vec{y}) =
%   \underset{a, b \leq k, a \cdot b = k}{\bigvee}(\psi^{\eta)_1}_{n, a;
%   \beta}(\vec{x}) \land \psi^{\eta_2}_{n, b; \beta}(\vec{x}))$. The other
%   arithmetic cases are handled similarly.

%   We now consider the application of an operator. Let $\Omega \in \setop$ and
%   suppose

%   \begin{align*}
%   \eta(\vec{y}, \vec{\nu}) = \Omega_{E} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [l]}].
% \end{align*}
% For each $i \in [l]$ let $T_i = [n]^{c_1} \times , \ldots, \times
% [n]^{c_{r_i}}$. Let $T$ be a function that maps $i \in [l]$ to $T_i$. where
% $c_{j}$ is the arity of ...
% \begin{align*}
%   \psi^{\eta}_{n, k; \beta}(\vec{x}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert}, e \leq M}[&(\bigwedge_{i \leq \vert \vec{\pi}\vert} \psi^{\pi_{i}}_{n, p_i; \beta}(\vec{x})) \\ &\land Q_{E, T ; (p_1, \ldots, p_n); e} ((\vec{x}^{j, \vec{t}}_1, \ldots, \vec{x}^{j, \vec{t}}_{r_i}) \cdot (\chi_{i, \vec{t}})_{ n; \beta})_{j \in [l], \vec{t} \in T_j}]
% \end{align*}
% \end{proof}

% \begin{lem}
%   Let $\setop$ be a set of non-quotienting operators. Let $\setquant :=
%   \setquant_{\setop}$ be the corresponding set of extended quantifiers. If a
%   query can be defined by a $\PT$-uniform family of $\FO^{\nats} (\setop)$
%   substitution programs formulas then it can be defined by a $\PT$-uniform
%   family of $\FO (\setquant)$ substitution programs
% \end{lem}
% \begin{proof}
%   Let $\rho$ be a vocabulary. Let $(f_n : [M_n] \ra \FO^{\nats} \ra
%   \FO^{\nats}(\setop)[\tau])_{n \in \nats}$ be a $\PT$-uniform family of
%   $\FO^{\nats}(\setop)[\tau]$ of substitution programs.
% \end{proof}

% The proof of the following result follows from the standard `unrolling' of the
% fixed-point operators. For more detail please see~\cite{}.

% \begin{lem}
%   Let $\setop$ be a set of operators. If a query can be defined in
%   $\FP^{\nats} (\setop)$ then it can be defined by a $\PT$-uniform family of
%   $\FO^{\nats} (\setquant)$ substitution programs with constant program-width
%   and relation-width.
% \end{lem}
We aim to show that every $\PT$-uniform family of $\FO^{\nats}
(\setop)$-substitution programs with bounded formula-length and width can be
translated to $\PT$-uniform families of $\FO(\setquant)$-substitution programs.
We do this in two stages. First we show that each formula in a $\FO^{\nats}
(\setop)$-substitution program may be translated to a substitution program in
$\FO(\setquant)$. Second, we show that each by applying this translation to each
formula in each member of a $\PT$-uniform family of $\FO(\setquant). $combining
each of these translations we can translate


. In other words, we want to be able to remove the number sort. Let $\rho$ be a
vocabulary and let $\setop$ be a set of operators. Let $\setquant$ be a
corresponding set of extended quantifiers. Let $\theta (\vec{x}, \vec{\mu};
\vec{V})$ be a formula in $\FO^{\nats}(\setop)[\rho]$, where $\vec{V} = (V_1,
\ldots, V_v)$ is a sequence of mixed-sort second-order variables such that for
each $i \in [v]$, $V_i$ has arity $(v_i, m_i)$.

Let $n \in \nats$. Let $\boldsymbol{\theta}_n = \{\theta_{n; \beta}(\vec{x};
\vec{V}^n_1, \ldots, \vec{V}^n_{v}) : \beta \in [n]^{\vec{\mu}} \}$ in
$\FO(\setquant)[\rho]$, where for each $i \in [v]$ we have $\vec{V}^n_i =
(V^n_{i, \vec{a}})_{\vec{a} \in [n]^{m_i}}$ where $V^n_{i, \vec{a}}$ is an
element-sort second-order variable with arity $v_i$.

We say $\boldsymbol{\theta}_n$ \emph{translates $\theta$ for $n$} if for all
\begin{enumerate}
\item $\mathcal{A} \in \fin[\rho, n]$,
\item assignments $\alpha \in A^{\vec{x}}$ and $\beta \in [n]^{\vec{\mu}}$, and
\item assignments $\gamma$ and $\gamma'$, where $\gamma$ maps $V_i$ to
  $V^{\gamma}_i \subseteq A^{v_i} \times [n]^{m_i}$ and $\gamma'$ maps $V^n_{i,
    \vec{b}}$ to $V^{n, \gamma'}_{i, \vec{b}} \subseteq A^{v_i}$ such that
  $(\vec{a}, \vec{b}) \in V^{\gamma}_{i}$ if, and only if, $\vec{a} \in V^{n,
    \gamma'}_{i, \vec{b}}$ then
\end{enumerate}
\begin{align*}
  \mathcal{A} \models \theta [\alpha , \beta, \gamma]  \iff \mathcal{A} \models \theta_{n, \beta} [\alpha, \gamma'].
\end{align*}
We say $\boldsymbol{\theta} = (\boldsymbol{\theta}_n)_{n \in \nats}$ translates
$\theta$ if $\boldsymbol{\theta}_n$ translates $\theta$ for all $n \in \nats$.

We similarly define a \emph{translation} for number-terms. Let $\eta(\vec{x},
\vec{\mu}, \vec{V})$ be a number term and let $n \in \nats$. We say that
$\boldsymbol{\theta}^{\eta}_n = \{\theta^{\eta}_{n, k; \beta}(\vec{x},
\vec{V}^n_1, \ldots, \vec{V}^n_{v}) : k \in \nats, \beta \in [n]^{\vec{\mu}} \}$
\emph{translates} $\eta$ for $n$ if for all $k \in \nats$ and all $\mathcal{A}$,
$\alpha$, $\beta$, $\gamma$, and $\gamma'$ defined as above we have
\begin{align*}
  \eta^{(\mathcal{A}, \alpha, \beta, \gamma)} = k \iff \mathcal{A} \models \theta^{\eta}_{n, k; \beta}[\alpha, \gamma'].
\end{align*}
We are now ready to prove that a formula that appears in a
$\FO^\nats(\setop)$-substitution program may be translated to a sequence of
$\FO(\setquant)$-formulas, where $\setquant$ is the set of extended quantifiers
associated with $\setop$.

\begin{lem}
  \label{lem:translate-program-line}
  Let $\rho$ be a vocabulary. Let $\setop$ be a set of normal operators and let
  $\setquant$ be the corresponding set of extended quantifiers. Suppose
  $\FO^{\nats}(\setop)$ is closed under operator quotients and has constant
  numeric-width. Let $\theta(\vec{x}, \vec{\mu};\vec{V}) \in \FO^{\nats}
  (\setop)[\rho]$ be a formula defined in terms of the second-order variables
  $\vec{V} = (V_1, \ldots, V_v)$. Let $t$ be the numeric-width and $w$ be the
  number-variable width of $\theta$.
  
  There exists a set of formulas $\boldsymbol{\theta} = \{\theta_{n,
    \beta}(\vec{x}; \vec{V}^n_1, \ldots, \vec{V}^n_{v}) : n \in \nats, \beta \in
  [n]^{\vec{\mu}} \}$ in $\FO(\setquant)[\rho]$ that translate $\theta$. We also
  have that each formula in $\boldsymbol{\theta}$ has width less than the
  element-width of $\theta$. Moreover, the function that maps $(n, \theta)$ to
  $(\theta_{n, \beta})_{\beta \in [n]^{\vec{\mu}}}$ is computable in time
  $c^{\vert \cl{\theta} \vert} \cdot n^{c \cdot \vert \cl{\theta} \vert \cdot (t
    + w)}$ for some constant $c$.
\end{lem}
% \begin{lem}
%   Let $\rho$ be a vocabulary. Let $\setop$ be a set of unrestricted operators
%   and let $\setquant$ be the corresponding set of extended quantifiers. Let $n
%   \in \nats$ and let $\theta(\vec{x}, \vec{\mu}) \in \FO^{\nats}
%   (\setop)[\rho]$ be a formula defined in terms of the mixed-sort relation
%   variables $V_1, \ldots, V_k$. Let $m = \vert \vec{\mu} \vert$ and for each
%   $i \in [k]$ let $v_i$ be the arity of the element sort and let $m_i$ be the
%   arity of the number sort in $V_i$. For each $i \in [k]$ and $\vec{b} \in
%   [n]^{m_i}$ we define an element-sort second-order variable $V_{i, \vec{b}}$
%   of arity $v_i$.

%   There exists a sequence of $\FO(\setquant)[\rho]$ formulas $\bd{\theta} =
%   \{\theta_{\vec{a}}(\vec{x}) : \vec{a} \in [n]^{m}\}$ where each
%   $\theta_{\vec{a}}(\vec{x})$ is defined in terms of the relation variables
%   $\bigcup_{i \in [k]} \{V_{i, \vec{b}} : \vec{b} \in [n]^{m_i}\}$ and such
%   that if

%   \begin{enumerate}
%   \item $\mathcal{A} \in \fin[\tau, n]$,
%   \item $\alpha \in A^{\vec{x}}$, and $\beta \in [n]^{\vec{\mu}}$ are
%     assignments, and
%   \item $\gamma$ is an assignment to the second-order variables that maps
%     $V_i$ to $V^{\gamma}_i \subseteq A^{v_i} \times [n]^{m_i}$ and $\gamma'$
%     is an assignment that maps $V_{i, \vec{b}}$ to $V^{\gamma'}_{i, \vec{b}}
%     \subseteq A^{v_i}$ such that $(\vec{a}, \vec{b}) \in V^{\gamma}_{i}$ if,
%     and only if, $\vec{a} \in V_{i, \vec{b}}$ then
%   \end{enumerate}
%   \begin{align*}
%     \mathcal{A} \models \theta [\alpha , \beta, \gamma] \iff \mathcal{A}
%     %     \models \theta_{\beta(\vec{\mu})} [\alpha, \gamma'].
%   \end{align*}

%   Moreover, we have that the function that maps $(n, \theta(\vec{x,
%   \vec{\mu}})$ to $\bd{\theta}$ is computable in $p(n^{\width(\theta)} \cdot
%   )$.
% \end{lem}
\begin{proof}
  Let $n \in \nats$. We aim to recursively define a translation for $n$ for each
  formula and number-term in $\theta$. That is, for a sub-formula or
  sub-number-term $\gamma(\vec{y}, \vec{\nu} ; \vec{V})$ of $\theta$ we define a
  translation of $\gamma$ for $n$ given translations of the sub-formulas and
  sub-number-terms of $\gamma$ for $n$. More precisely, if $\gamma$ is a
  number-term we will define a sequence of $\FO(\setquant)[\rho]$-formulas
  $\boldsymbol{\phi}^{\gamma}_n = \{\phi^{\gamma}_{n, k; \beta}(\vec{y};
  \vec{V}^n_1, \ldots, \vec{V}^n_{v}) : \beta \in [n]^{\vec{\nu}}, k \in
  \nats\}$ that translates $\gamma$ for $n$ and if $\gamma$ is a formula we will
  define a sequence $\boldsymbol{\phi}^{\gamma}_n = \{\phi^{\gamma}_{n ;
    \beta}(\vec{y}; \vec{V}^n_1, \ldots, \vec{V}^n_v): \beta \in [n]^{\vec{\nu}}
  \}$ that translates $\gamma$ for $n$. We prove this result by considering
  cases. In each case we let $\gamma_1, \gamma_2, \ldots$ denote the
  sub-formulas or sub-number-terms of $\gamma$ and we use $\beta$ to denote an
  arbitrary assignments to the free number variables in $\gamma$.

  We first consider the base cases. Suppose $\gamma$ is a number-variable or a
  constant (i.e.\ $0$ or $1$). If $\gamma$ evaluates to $k$ under the assignment
  $\beta$ let $\phi^{\gamma}_{n, k; \beta}$ be a tautology and otherwise let
  $\phi^{\gamma}_{n, k; \beta}$ be a contradiction. Suppose $\gamma$ is an
  atomic formula or (non-number) term. If the free variables in $\psi$ are all
  element variables then let $\phi^{\gamma}_{n; \beta} = \gamma$. If
  $\gamma(\vec{y}, \vec{\nu}; \vec{V}) = V_i(\vec{y}, \vec{\nu})$ for some $i
  \in [v]$ then let $\phi^{\gamma}_{n; \beta}(\vec{y}) = V^n_{i,
    \beta(\vec{\nu})}$. This suffices to give a translation of $\gamma$ for $n$
  for this case.

  We now handle the multiplication case. The other arithmetic functions may be
  handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V})$ is a number
  term and suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) = \gamma_1(\vec{y}_1,
  \vec{\nu}_1; \vec{V}) \cdot \gamma_2(\vec{y}_2, \vec{\nu}_2; \vec{V})$. Let
  $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in [n]^{\vec{\nu}_2}$ be
  compatible with $\beta$, then for each $k \leq n^{t}$ let
  \begin{align*}
    \phi^{\gamma}_{n, k ; \beta} (\vec{y}) =
    \uset{a, b \leq k}{ a \cdot b = k}{\bigvee}(\phi^{\gamma_1}_{n, a;
    \beta_1}(\vec{y}) \land \phi^{\gamma_2}_{n, b; \beta_2}(\vec{y})).
  \end{align*}

  We now handle the less-than relation for number-terms. The equality relation
  may be handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) =
  \gamma_1(\vec{y}_1, \vec{\nu}_1; \vec{V}) \leq \gamma_2 (\vec{y}_2,
  \vec{\nu}_2 ; \vec{V})$. Let $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in
  [n]^{\vec{\nu}_2}$ be compatible with $\beta$, and let
  \begin{align*}
    \phi^{\gamma}_{n; \beta} = \uset{a, b \leq n^t}{a \leq
    b}{\bigwedge} \phi^{\gamma_1}_{n, a; \beta_1} \land \phi^{\gamma_2}_{n, b;
    \beta_2}.
  \end{align*}
  
  We now handle conjunction between formulas. The other logical connectives may
  be handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) =
  \gamma_1(\vec{y}_1, \vec{\nu} ; \vec{V}) \land \gamma_2 (\vec{y}_2,
  \vec{\nu}_2 ; \vec{V})$. Let $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in
  [n]^{\vec{\nu}_2}$ be compatible with $\beta$. Let $\phi^{\gamma}_{n ; \beta}
  = \phi^{\gamma_1}_{n ; \beta_1} \land \phi^{\gamma_2}_{n ; \beta_2}$.

  We now handle the operator case. Let $\Omega_{E, \ar} \in \setop$ and suppose
  \begin{align*}
    \gamma(\vec{y}, \vec{\nu}; \vec{V}) = \Omega_{E, \ar} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [r]}].
  \end{align*}
  For each $i \in [r]$, $l \in [r_i]$ let $s^i_l = \zeta(R_i)(l)$ and $c^i_l =
  \ar(s^i_l, 2)$. Let $T^i_n := [n]^{c^i_l} \times , \ldots, \times
  [n]^{c^i_{r_i}}$. Let $\Upsilon_i : T^n_i \ra \FO(\setquant)[\rho]$ be defined
  by $\Upsilon_i (\vec{m}_1, \ldots, \vec{m}_{r_i}) = \phi^{\chi_i}_{n ;
    \beta_i}$, where $\beta_i$ is an assignments to all the free number
  variables in $\chi_i$ such that (i) $\beta_i$ agrees with $\beta$ for each
  variable in $\vec{\nu}$ not bound by the operator and (ii) $\beta_i$ assigns
  $\vec{\mu}^i_{j}$ to $\vec{m}_j$ for each $j \in [r_i]$. For each $i \in
  [\vert \pi \vert]$ let $\alpha_i$ be an assignment to the free number
  variables in $\vec{\pi}(i)$ compatible with $\beta$. Let
  \begin{align*}
    \phi^{\gamma}_{n; \beta}(\vec{y}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert} \leq n^t}[(\bigwedge_{i \in [\vert \vec{\pi}\vert]} \phi^{\pi(i)}_{n, p_i; \alpha_i}(\vec{y})) \land Q^{E, \ar}_{n, (p_1, \ldots, p_{\vert \vec{\pi} \vert})} ((\vec{x}^{j}_1, \ldots, \vec{x}^{j}_{r_j}) \cdot \Upsilon_j)_{j \in [r]}].
  \end{align*}
  
  We can think of the $\forall$ and $\exists$ quantifiers as generalised
  operators, and so these case are subsumed by the operator case. There is an
  obvious recursive algorithm implementing the construction above. It can be
  shown by reviewing each of the above cases that the cost of computing the
  translation for a sub-formula or sub-number-term $\gamma (\vec{y}, \vec{\nu} ;
  \vec{V})$ is at most $(c_1 \cdot n^{c_2 \cdot (t_{\gamma} + w_{\gamma} )}
  \cdot X)$, where $c_1$ and $c_2$ are constants, $t_{\gamma}$ and $w_{\gamma}$
  are the numeric-width of $\gamma$ and number-variable width, respectively, and
  $X$ is the maximal cost of translating a sub-formula or sub-number-term of
  $\gamma$. It follow that for a given $n$ and $\theta$ we can construct a
  family of formulas $\boldsymbol{\theta}_n$ that translates $\theta$ for $n$ in
  at most $c^{\vert \cl{\theta} \vert}_1 \cdot n^{c_2 \vert \cl{\theta} \vert
    \cdot (t + w)}$. The result follows.
\end{proof}

% \begin{lem}
%   Let $\setop$ be a set of non-quotienting operators. Let $\setquant :=
%   \setquant_{\setop}$ be the corresponding set of extended quantifiers. If a
%   query can be defined by a $\PT$-uniform family of $\FO^{\nats} (\setop)$
%   substitution programs with constant program-width and relation-width then it
%   can be defined by a $\PT$-uniform family of $\FO (\setquant)$ substitution
%   programs.
% \end{lem}
% \begin{proof}
%   Let $\rho$ be a vocabulary. Let $I = (I_n : [M_n] \ra \FO^{\nats} \ra
%   \FO^{\nats}(\setop)[\tau])_{n \in \nats}$ be a $\PT$-uniform family of
%   substitution programs. Let $n \in \nats$. For each $w \in [M_n]$ let
%   $\theta_w (\vec{x}) := I_n(w)$. For each mixed-sort second-order variable
%   $V_i$ with arity $(v_i, m_i)$ we define a family of element-sort
%   second-order variables $\mathbb{V}_i = \{V_{i, \vec{a}} : \vec{a} \in
%   [n]^{m_i}\}$ such that $v_{i, \vec{a}}$ is the arity of $V_{i, \vec{a}}$.

%   Fix $w \in [M_n]$ and let $\theta_{n,w} (\vec{x}, \vec{\mu}) := I_n(w)$. We
%   aim to define for each number term $\eta(\vec{y}, \vec{\nu})$ appearing in
%   $\theta_w(\vec{x}, \vec{\mu})$ a sequence of $\FO(\setquant)[\rho]$-formulas
%   $\{\phi^{\eta}_{n, w; k; \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}) :
%   \beta \in [n]^{\vec{\nu}}, k \in \nats\}$.
  
%   We say that a number term $\eta(\vec{y}, \vec{\nu})$ in
%   $\FO^{\nats}(\setop)$ has a \emph{translation for $n$} if there is a
%   sequence of $\FO(\setquant)$-formulas $(\phi^{\eta}_{n, k;
%   \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}$ such that for each
%   $\rho$-structure $\mathcal{A}$ of size $n$ and for each assignment $\alpha
%   \in [n]^{\vec{y}}$ we have that $\mathcal{A} \models \phi^{\eta}_{n, k;
%   \beta}[\alpha]$ if, and only if, $\mathcal{a} \models (\eta = k)[\alpha \cup
%   \beta]$.

%   We say a formula $\psi(\vec{y}, \vec{\nu})$ in $\FO^{\nats}(\setop)$ has a
%   \emph{translation for $n$} if there is a sequence of
%   $\FO(\setquant)$-formulas $(\phi_{n; \beta} (\vec{y}))_{\beta \in
%   [n]^{\vec{\mu}}}$ such that each $\tau$-structure $\mathcal{A}$ of size $n$
%   and each assignment $\alpha \in [n]^{\vec{y}}$, we have that $\mathcal{A}
%   \models \phi_{n; \vec{\beta}}[\alpha]$ if, and only if, $\mathcal{A} \models
%   \phi[\alpha \cup \beta]$.

%   We aim to show that $\theta(\vec{x}, \vec{\mu})$ has a \emph{translation for
%   $n$} by induction on the structure of the formula. It is easy to see that if
%   $\eta(\vec{y}, \vec{\nu})$ is a number variable or a constant (i.e. $0$ or
%   $1$) then $\eta$ has a translation for $n$. We also have that if
%   $\psi(\vec{y})$ is a formula then $\psi(\vec{y})$ is its own translation for
%   $n$. If $psi(\vec{y}, \vec{\nu}) = V_i(\vec{y}, \vec{\nu})$ then the
%   assignment $\psi_{n; \beta}(\vec{y}) = V_{i, \beta(\vec{\nu})}$ defines a
%   translation for $n$.

%   Let $\eta(\vec{y}, \vec{\nu})$ be a number term and suppose all sub-formulas
%   and sub-number-terms of $\eta$ have a translation for $n$. Let $\beta \in
%   [n]^{\vec{\nu}}$. Suppose $\eta(\vec{y}, \vec{\nu}) = \eta_1(\vec{y}_1,
%   \vec{\nu}_1) \cdot \eta_2(\vec{y}_2, \vec{\nu}_2)$. Let $\beta_1 \in
%   [n]^{\vec{nu}_1}$ and $\beta_2 \in [n]^{\vec{nu}_2}$ be assignments
%   compatible with $\beta$. Let $\psi^{\eta}_{n, k ; \beta} (\vec{y}) =
%   \underset{a, b \leq k, a \cdot b = k}{\bigvee}(\psi^{\eta)_1}_{n, a;
%   \beta}(\vec{x}) \land \psi^{\eta_2}_{n, b; \beta}(\vec{x}))$. The other
%   arithmetic cases are handled similarly.

%   We now consider the application of an operator. Let $\Omega \in \setop$ and
%   suppose

%   \begin{align*}
%   \eta(\vec{y}, \vec{\nu}) = \Omega_{E} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [l]}].
% \end{align*}
% For each $i \in [l]$ let $T_i = [n]^{c_1} \times , \ldots, \times
% [n]^{c_{r_i}}$. Let $T$ be a function that maps $i \in [l]$ to $T_i$. where
% $c_{j}$ is the arity of ...x
% \begin{align*}
%   \psi^{\eta}_{n, k; \beta}(\vec{x}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert}, e \leq M}[&(\bigwedge_{i \leq \vert \vec{\pi}\vert} \psi^{\pi_{i}}_{n, p_i; \beta}(\vec{x})) \\ &\land Q_{E, T ; (p_1, \ldots, p_n); e} ((\vec{x}^{j, \vec{t}}_1, \ldots, \vec{x}^{j, \vec{t}}_{r_i}) \cdot (\chi_{i, \vec{t}})_{ n; \beta})_{j \in [l], \vec{t} \in T_j}]
% \end{align*}


% \end{proof}
Let $L$ be a logic with constant numeric-width. Let $\rho$ be a vocabulary. We
say that a $\PT$-uniform family of $L[\rho]$-substitution programs $(\Phi_n)_{n
  \in \nats}$ is \emph{bounded} if there is a constant $k \in \nats$ such that
for each $n \in \nats$ the numeric-width and length of each formula in $\Phi_n$
is less than $k$.

\begin{lem}
  Let $\rho$ be a vocabulary and let $\setop$ be a set of normal operators such
  that $\FO^{\nats}(\setop)$ has constant numeric-width. Let $\setquant$ be the
  corresponding set of quantifiers. If a query can be defined by a bounded
  $\PT$-uniform family of $\FO^{\nats} (\setop)[\rho]$-substitution programs
  then it can be defined by a $\PT$-uniform family of $\FO
  (\setquant)[\rho]$-substitution programs with constant width.
\end{lem}
\begin{proof}
  Let $\Theta := (\Theta_{n})_{n \in \nats}$ be a bounded $\PT$-uniform family
  of $\FO^{\nats}(\setop)[\rho]$-substitution programs. For each $n \in \nats$
  let $M_n := \dom(\Theta_n)$. For each $n \in \nats$, $i \in M_n$ let
  $\vec{x}^n_i$ and $\vec{\mu}^n_i$ be the free element variables and number
  variables in $\Theta_n(i)$. Let $V^n_i$ be a mixed-sort second-order variable
  with type $(\vec{x}^n_i, \vec{\mu}^n_i)$. We think of $V^n_i$ as the
  second-order variable associated with the formula $\Theta_n(i)$. For each $n
  \in \nats$, $i \in M_n$, and $\vec{a} \in [n]^{\vert \vec{\mu}^n_i \vert}$ let
  $V^n_{i ; \vec{a}}$ be an element-sort second-order variable with arity $\vert
  \vec{x}^n_i\vert$. Let $\theta_{n, i}(\vec{x}^n_i, \vec{\mu}^n_i; \vec{V}^n_i)
  := \Theta_n(i)$, where $\vec{V}^n_i = (V^n_j)_{j > i}$. Let
  $\boldsymbol{\theta}_{n, i} := \{\theta_{n, i; \beta} (\vec{x}^n_i
  ,\vec{\mu}^n_i ; \vec{W}^n_{i}) : \vec{a} \in [n]^{\vert \vec{\mu}^n_i
    \vert}\}$ be a translation of $\theta_{n, i}$ for $n$, where $\vec{W}^n_i =
  \{V^{n}_{j; \vec{a}} : j \in M_n, j > i, \vec{a} \in [n]^{\vert \vec{\mu}^n_j
    \vert}\}$. Importantly, it follows from
  Lemma~\ref{lem:translate-program-line} and the fact that $\Theta$ is bounded
  that there is a an algorithm that runs in time polynomial in $n$ that takes a
  formula $\theta_{n, i}$ and outputs the translation $\boldsymbol{\theta}_{n,
    i}$ for $n$.

  Let $M_n' = \{(i, \vec{a}) : i \in M_n, \vec{a} \in [n]^{\vert \vec{\mu}^n_i
    \vert}\}$. Let $\Theta_n' : M_n' \ra \FO(\setquant)[\rho]$ be defined by
  $\Theta_n' (i, \vec{a}) := \theta_{n, i; \beta}$, where $\beta$ maps
  $\vec{\mu}^n_i$ to $\vec{a}$, for each $(i, \vec{a}) \in M_n'$. Since $M_n'$
  is a product of linearly ordered sets we can define a lexographical order on
  $M_n'$. Let $i, j \in M_n$ and suppose $i > j$. Then, from the definition of a
  substitution program, $\theta_{n, i}$ does not contain the second-order
  variable $V^n_{j}$. It follows that for all $\vec{a} \in [n]^{\vert
    \vec{\mu}^n_i \vert}$ and $\vec{b} \in [n]^{\vert \vec{\mu}^n_j \vert}$ the
  translation $\theta_{n, i ; \beta}$, where $\beta$ maps $\vec{\mu}^n_i$ to
  $\vec{a}$, does not contain any second-order variable $V^n_{j ; \vec{b}}$. It
  follows that $\Theta_n'$ is a well-formed substitution program.

  \begin{claim}
    For each $n \in \nats$ let $\theta_n(\vec{x}^n_1, \vec{\mu}^n_1)$ be the
    flattening of $\Theta_n$ and for each $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_1\vert}$ let $\theta_{n, \vec{c}}'(\vec{x}^n_1)$ be the
    flattening of $\Theta_n'$ at $(1, \vec{c})$. Let $\mathcal{A} \in \fin[\rho,
    n]$. Let $\alpha \in A^{\vec{x}^n_1}$ and let $\beta \in
    [n]^{\vec{\mu}^n_1}$. Then $\mathcal{A} \models \theta_n [\alpha, \beta]$
    if, and only if, $\mathcal{A} \models \theta_{n,
      \beta(\vec{\mu}^n_1)}[\alpha]$.
  \end{claim}
  \begin{proof}
    Let $n \in \nats$. For each $i \in M_n$ and $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_i\vert}$ let $\phi_{n, i}$ be the flattening of $\Theta_n$ at
    $i$ and let $\phi_{n, (i, \vec{c})}'$ be the flattening of $\Theta_n'$ at
    $(i, \vec{a})$. Let $\mathcal{A} \in \fin[\rho, n]$. We will prove by
    backwards induction that for each $i \in M_n$, $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_i\vert}$, assignments $\alpha \in A^{\vec{x}^n_i}$ and $\beta$
    that maps $\vec{\mu}^n_i$ to $\vec{c}$, we have that
    $\mathcal{A} \models \phi_{n, i}[\alpha, \beta]$ if, and only if,
    $\mathcal{A} \models \phi_{n, (i, \vec{c})}[\alpha]$.


    Let $n \in \nats$, $(i, \vec{a}) \in M_n'$ let $M_{n, (i, \vec{a})}' = \{(j,
    \vec{b}) : (i, \vec{a}) \leq (j, \vec{b})\}$ and let $M_{n, i} = \{j : i
    \leq j\}$. Let $\Psi_{n, (i, \vec{a})}'$ be the restriction of $\Theta_n'$
    to $M_{n, (i, \vec{a})}$ and let $\Psi_{n, i}$ be the restriction of
    $\Theta_n$ to $M_{n, i}$. We now prove that for each $(i, \vec{a}) \in M_n'$
    the flattening of $\Psi_{n, \vec(i, \vec{a})}'$ defines the same query as
    the flattening of $\Psi_{n, i}$ with the assignment that $\vec{\mu}^n_i$ to
    $\vec{a}$. The proof is by backwards induction. Let $i \in M_n$ and let
    $\vec{a} \in [n]^{\vert \vec{\mu}^n_i \vert}$. Let $\phi_{n, i}$ be the
    flattening of $\Phi_{n, i}$ and let $\phi_{n, (i, \vec{a})}$ be the
    flattening of $\Phi_{n, (i, \vec{a})}$. Let $\mathcal{A} \in \fin[\rho, n]$
    and suppose we have assignments $\alpha \in A^{\vec{x}^n_i}$ and $\beta$
    that maps $\vec{\mu}^n_i$ to $\vec{a}$. Suppose $i$ is the maximum value in
    $M_n$. It follows from the definition of a translation for $n$ that
    $\Phi_{n, i}(i) = \Theta_n(i)$, and so $\Phi_{n, i}(i) := \Theta_n'(i,
    \vec{a})$, has no second-order variables, and hence has trivial flattening.
    Moreover, we have from the definition of a translation that $\mathcal{A}
    \models \theta_{n, i; \beta}[\alpha]$ if, and only if, $\mathcal{A} \models
    \theta_{n, i} [\alpha, \beta]$.

    Suppose $i$ is not the maximal value in $M_n$ and the claim holds for all $j
    > i$. Let $\gamma$ an assignment that maps the mixed-sort second-order
    variable $V^n_j$ to the relation defined by $(\phi_{n, i})^{\mathcal{A}}$
    for each $j \in M_{n, i}$. Let $\gamma'$ be the assignment that maps the
    single-sort second-order variable $V^n_{j, \vec{b}}$ to the relation defined
    by $(\phi_{n, (j, \vec{b})})^{\mathcal{A}}$ for each $(j, \vec{b}) \in M_{n,
      (i, \vec{a})}'$. We have from the induction hypothesis that $\mathcal{A}
    \models \phi_{n, (j, \vec{b})} [\alpha]$ if, and only if, $\mathcal{A}
    \models \phi_{n, j}[\alpha, \beta]$, where $\beta$ maps $\vec{\mu}^n_j$ to
    $\vec{b}$. It follows that for any $\vec{c} \in A^{\vert \vec{x}^n_j
      \vert}$, $(\vec{c}, \vec{b}) \in V^n_{j}$ if, and only if, $\vec{c} \in
    V^n_{j, \vec{b}}$. We thus have, from the definition of a translation for
    $n$, that $\mathcal{A} \models $


    maps each $V_i$and $\gamma'$

    It follows as well from the definition of a translation that for the
    assignments $\alpha$ to the element variables in $\Theta_n(i)$

    for all $(j, \vec{b}) >= $ Let $\mathcal{A} \in \fin[\rho, n]$. We have that
    $\mathcal{A} \models \Theta_n$ if, and only if, $\mathcal{A} \models
    \theta_n$, where $\theta_n$ is the flattening of $n$.

\end{proof}
We now show that $\Theta' = (\Theta_n')_{n \in \nats}$ defines the same query as
$\Theta$. It follows that we can construct $\Theta_n'$ in time polynomial in
$n$. Since there is a constant bound on the formula-length, and hence the width,
of $\Theta$, it follows from Lemma~\ref{lem:translate-program-line} that there
is a constant bound on the width of $\Theta' := (\Theta_n')_{n \in \nats}$. It
follows that $(\Theta_n')_{n \in \nats}$ is a $\PT$-uniform family of
$\FO(\setquant_{\setop})[\rho]$-substitution with constant width and that define
the same query as $\Theta$.
\end{proof}

\subsection{Infinitary Logics}
Let $\setquant$ be a set of extended quantifiers. We define the extension of
$\mathcal{L}$ by $\setquant$ by extending the formula formation rules for
$\mathcal{L}$ with the following rule:

\begin{textbox}[14.0cm]
  Let $Q^{E, \ar}_{\vec{a}, n} \in \setquant$, $i \in [r]$, $l \in [r_i]$ let
  $c^i_l = \ar(\zeta(R_i)(l), 2)$ and let $T^i_n := [n]^{c^i_l} \times , \ldots,
  \times [n]^{c^i_{r_i}}$. Let $T_n$ be the function that maps $i \in [r]$ to
  $T^i_n$. Let $\Upsilon_i : T^i_n \ra L(Q^{E, \ar}_{\vec{p}, n})$. For each $i
  \in [r]$ and $l \in [r_i]$ let $s = \zeta (R_i)(l)$ and let $\vec{x}^i_l$ be
  an $\ar(s, 1)$-length tuple of element variables. Then $Q^{E, \ar}_{\vec{p},
    n} [(\vec{x}^i_1, \ldots, \vec{x}^i_{r_i}) \cdot \Upsilon_i]_{i \in [r]}$ is
  a formula in $\mathcal{L}(\setquant)$.
\end{textbox}

\begin{prop}
  Let $\rho$ be a vocabulary and $\setop$ be a set of operators. Let $\setquant$
  be the corresponding set of extended quantifiers. Then each query definable in
  $\FP^{\nats}(\setop)[\rho]$ can be defined by a $\PT$-uniform family of
  $\FO(\setquant)[\rho]$ substitution programs and each query definable by a
  $\PT$-uniform family of $\FO(\setquant)[\rho]$ is definable by a formula of
  $\mathcal{C}^{\omega}(\setquant)[\rho]$.
\end{prop}
\begin{proof}
  The first part of the result follows from Lemma~\ref{}. Let $(\Phi_n)_{n \in
    \nats}$ be a $\PT$-uniform family of $\FO(\setquant)[\rho]$-substitution
  programs with constant width. Let $(\phi_n)_{n \in \nats}$ be such that
  $\phi_n$ is the flattening of $\Phi_n$ for all $n \in \nats$. Let $\theta
  (\vec{x}) = \bigwedge_{n \in \nats} (\exists^{=n} \, x = x) \land \phi_n
  (\vec{x})$. It follows from the fact that $\Phi$ has constant width that
  $\theta \in \mathcal{L}^\omega(\setquant)$. Moreover, $\theta$ and
  $(\Phi_n)_{n \in \nats}$ define the same query. The second part of the result
  follows.
  % **problem, we need some sort of width condition
  % **problem, we need counting
  % **problem, each $\phi_n$ must have the same set of free variables
\end{proof}

We should work through two examples. Let $\setop_C$ be the set of all counting
operators.
ote
  the arity of $R_i$ and $f_j$ be the arity of $F_j$.

  Let $\ar : S \times [2] \ra \nats$. A \emph{many-sorted $L [\rho,
    \tau]$-interpretation} of \emph{width} $(\ar)$ is a sequence $\mathcal{I} :=
  (\vec{\phi}^D, \vec{\phi}^{\approx}, (\phi_i)_{i \in [r]}, (\eta_j)_{j \in
    [f]})$, where

  \begin{enumerate}
  \item $\vec{\phi}^D = (\phi^D_1, \ldots, \phi^D_q)$, and for each $i \in [q]$,
    $\phi^D_i(\vec{x}, \vec{\mu})$ where $\vert \vec{x} \vert = \ar(s_i, 1)$ and
    $\vert \vec{\mu} \vert = \ar(s_i, 2)$,
  \item $\vec{\phi}^{\approx} = (\phi^{\approx}_1, \ldots, \phi^{\approx}_q)$,
    and for each $i \in [q]$ $\phi^{\approx}_i(\vec{x}_1\vec{\mu}_1, \vec{x}_2
    \vec{\mu}_2)$ where $\vert \vec{x}_1 \vert = \vert \vec{x}_2 \vert =
    \ar(s_i, 1)$ and $\vert \vec{\mu}_1 \vert = \vert \vec{\mu}_2 \vert =
    \ar(s_i, 2)$,
  \item for each $i \in [r]$, $\phi_i (\vec{x}^i_1 \vec{\mu}^i_1, \ldots,
    \vec{x}^{i}_{r_i} \vec{\mu}^{i}_{r_i})$ where for each $j \in [r_i]$, $\vert
    \vec{x}^i_j\vert = \ar(\zeta(R_i)(j), 1)$ and $\vert \vec{\mu}^i_j \vert =
    \ar(\zeta(R_i)(j), 2)$, and
  \item for each $i \in [f]$, $\nu_i (\vec{x}^i_1 \vec{\mu}^i_1, \ldots,
    \vec{x}^{i}_{f_i} \vec{\mu}^{i}_{f_i})$ where for each $j \in [f_i]$, $\vert
    \vec{x}^i_j \vert = \ar(\zeta(R_i)(j), 1)$ and $\vert \vec{\mu}^i_j \vert =
    \ar(\zeta(R_i)(j), 2)$.
  \end{enumerate}

  Let $\mathcal{A} \in \fin[\rho]$ and for all $i \in [q]$ let
  $(\phi^D_i)^{\mathcal{A}} := \{ \vec{a}\vec{m} \in A^{\ar(s_i, 1)} \times
  \nats^{\ar(s_i, 2)}: \mathcal{A} \models \phi^D_i[\vec{a}\vec{m}] \}$. We say
  that $\mathcal{I} (\mathcal{A})$ is defined if there exists $\mathcal{B} \in
  \fin[\tau]$ with universe $B = \uplus_{i \in [q]} B_i$ and a sort preserving
  surjection $h : \uplus_{i \in [q]} (\phi^D_i)^{\mathcal{A}} \ra \uplus_{i \in
    [q]} B_i$ such that:
    
  \begin{enumerate}
  \item for each $i \in [q]$ the relation $\approx_i$ on $B_i$ defined for each
    $\vec{a}_1\vec{m}_1, \vec{a}_2\vec{m}_2 \in (\phi^D_i)^{\mathcal{A}}$ such
    that $\vec{a}_1\vec{m}_1 \approx_i \vec{a}_2\vec{m}_2$ if, and only if,
    $\mathcal{A} \models \phi^{\approx}_i[\vec{a}_1\vec{m}_1,
    \vec{a}_2\vec{m}_2]$ is an equivalence relation,
  \item let $\approx = \uplus_{i \in [q]}\approx_i$ be an equivalence relation
    $B$, then for $a , b \in \uplus_{i \in [q]}(\phi^D_i)^{\mathcal{A}}$ if $a
    \approx b$ then $h(a) = h(b)$,
  \item for each $i \in [r]$ and for all $j \in [r_i]$ and
    $\vec{a}^j_i\vec{m}^j_i \in (\phi^D_i)$ $\vec{a}$$h(a) \in R^h_i =
    \{(\vec{a}_1\vec{})\}$
  \end{enumerate}
\end{definition}

\subsection{Generalised Many-Sorted Operators}
Let $\tau = (R, F, S, \zeta)$ be a many-sorted vocabulary with number-valued
functions, where $R = \{R_1, \ldots, R_{r}\}$, $F = \{ F_1, \ldots, F_{f} \}$,
and $S = \{s_1, \ldots, s_{q}\}$. For each $i \in [r]$ and $j \in [f]$ let $r_i$
denote the arity of $R_i$ and $f_j$ be the arity of $F_j$.

Let $m \in \nats$ and let $E : \nats^{m} \times \fin[\tau] \ra \nats$. We say
that $E$ is \emph{closed under isomorphism} if for all $\mathcal{A}, \mathcal{B}
\in \fin[\tau]$, $\vec{p} \in \nats^{m}$ if $\mathcal{A} \simeq \mathcal{B}$
then $E(\vec{p}, \mathcal{A}) = E(\vec{p}, \mathcal{B})$. Let $\ar : S \times
[2] \ra \nats$ be a function. We associate with the pair $(E, \ar)$ a
\emph{number-valued generalised operator} $\Omega_{(E, \ar)}$. We say the
\emph{vocabulary} of the operator is $\tau$, the \emph{arity} is $\ar$, the
\emph{evaluation function} is $E$, and the \emph{parameter-width} is $m$.

For a logic $L$ the extension $L(\Omega_{E, \ar})$ is the closure of the set of
formulae in $L$ over the following formula formation rule:

Let $\vec{\pi}$ be a sequence of number terms in $L(\Omega_{E, \ar})$. Let
$\vec{\phi}^D$ and $\vec{\phi}^{\approx}$ be the $q$-sequences of formulas such
that for each $i \in [q]$, $\phi^D_i$ has exactly $\ar(s_i, 1)$ free element
variables and $\ar(s_i, 2)$ free number variables and $\phi^{\approx}_i$ has
exactly $2\cdot\ar(s_i, 1)$ free element variables and $2\cdot\ar(s_i, 2)$ free
number variables. Let $(\chi_i)_{i \in [r]}$ and $(\eta_i)_{i \in [f]}$ be
sequences of formulas and number-terms, respectively. For each $i \in [r]$ and
$l \in [r_i]$ let $s = \zeta (R_i)(l)$ and let $\vec{x}^i_l$ be an $\ar(s,
1)$-length tuple of element variables and $\vec{\mu}^i_l$ be an $\ar(s,
2)$-length tuple of number variables. For each $j \in [f]$ and $k \in [f_j]$ let
$s = \zeta (F_i)(k)$ and let $\vec{y}^j_k$ be an $\ar(s, 1)$-length tuple of
element variables and $\vec{\nu}^j_k$ be an $\ar(s, 2)$-length tuple of number
variables. The following is a number term:
\begin{align*}
  \gamma = \Omega_{E, \ar} [\vec{\pi}] [\vec{\phi}^D, \vec{\phi}^{\approx}]  [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [r]}((\vec{y}^j_1 \vec{\nu}^j_1, \ldots, \vec{y}^j_{f_j} \vec{\nu}^j_{f_j})(\eta_j))_{j \in [f]}].
\end{align*}
The semantics of this operator is defined as follows: Let $\mathcal{I} :=
(\vec{\phi}^D, \vec{\phi}^{\approx}, \vec{\chi}, \vec{\eta})$ and
$\gamma^{\mathcal{A}} = E(\vec{\pi}^{\mathcal{A}}, \mathcal{I}(\mathcal{A}))$.

We can similarly define a \emph{Boolean-valued generalised operator}. The
definition of an operator is the same, except in this case $E : \nats^{m} \times
\fin[\tau] \ra \{0,1\}$. The extension of a logic by a Boolean-valued operator
is similar except in this case an application of a Boolean-valued generalised
operator is a formula rather than a number term.

Let $\setop$ be a set of operators. Let $L(\widetilde{\setop})$ be the set of
formulas and number-terms in $L(\setop)$ such that each application of a
generalised operator in $\setop$ that appears as a sub-formula or
sub-number-term has domain formulas that are valid and equality formulas that
simply test for equality. In other words, this interpretation involves no
restriction of the domain and no quotienting. In this case, since they have no
effect on the semantics, we often omit thee domain and equality formulas when
applying a generalised operator.

\begin{definition}
  We say a logic $L(\setop)$ is \emph{closed under operator quotients} if
  $L(\widetilde{\setop}) = L(\setop)$.
\end{definition}

It can be shown that many of the logics of interest are closed under operator
quotients.

\begin{lem}
  The logics $\FP^{\nats}$, $\FPC$, and $\FPR$ are closed under operator
  quotients.
  \label{lem:logics-operator-quotients}
\end{lem}
We are particularly interested in logics whose formulas cannot define numbers
that are super-polynomial in the size of the structure over which they are being
evaluated. In this case each number-term denotes a value that be held by a
fixed-length tuple of number variables.
\begin{definition}
  Let $L$ be a logic with a number sort. Let $\rho$ be a vocabulary. Let
  $\theta$ be a formula or number-term in $L[\rho]$. For each $n \in \nats$ let
  $e_{\theta}(n)$ be the maximal value denoted by a number-term in $\theta$ when
  evaluated for any given structure in $\fin[\rho, n]$ and assignment to the
  free variables in $\theta$ (and with free number-variables assigned to
  elements of $[n]$). We call the function $e_{\theta}$ the \emph{numeric bound}
  of $\theta$. We say $\theta$ has \emph{constant numeric-width} if there exists
  $k \in \nats$ such that $e_{\theta}(n) \leq n^k$ for all $n \in \nats$. In
  this case we call $k$ the \emph{numeric-width} of $\theta$. We say the logic
  $L$ has \emph{constant numeric-width} if for vocabulary $\rho$ each formula in
  $L[\rho]$ has constant numeric-width.
\end{definition}

It is easy to see that $\FPR$, $\FPC$, $\FP^{\nats}$, and many other logics of
interest have constant numeric-width.

We are restricting the set of operators to get a normal form.

\begin{definition}
  Let $\Omega$ be a generalised operator. We say $\Omega$ \emph{operates on
    formulas} if there are no function symbols in the vocabulary of $\Omega$. We
  say that $\Omega$ \emph{has no parameters} if the parameter-width is zero. We
  say $\Omega$ is \emph{numberless} if it operates on formulas and for all $s
  \in S$, $\ar(s, 2) = 0$. We call a numberless Boolean generalised operator a
  \emph{normal generalised quantifier}.
\end{definition}

\begin{lem}
  Let $L$ be a logic and let $\Omega_{E, \ar}$ be a generalised operator with
  constant numeric-width. There exists an operator $\Omega_{E', \ar'}$ that acts
  on formulas such that
  \begin{enumerate}
  \item $L(\Omega_{E, \ar}) \leq L(\Omega_{E', \ar'})$,
  \item if $L$ is an extension of $\FP^{(\nats, \leq)}$ then $L(\Omega_{E',
      \ar'}) \leq L(\Omega_{E, \ar})$,
  \item if $L$ is an extension of $\FOC$ and $\ar^* : S' \times [2] \ra \nats$
    compatible with $\ar$ then $L(\Omega_{E', \ar^*}) \leq L(\Omega_{E, \ar})$,
    and
  \item if $L$ is an extension of $\FOC$ then $L(\Omega_{E}) \equiv
    L(\Omega_{E'})$.
  \end{enumerate}
  \label{lem:op-to-op-on-formulas}
\end{lem}
\begin{proof}
  Let $\tau$ be the many-sorted vocabulary, $m \in \nats$ be the
  parameter-width, $\ar: S \times [2] \ra \nats$, and $E : \nats^m \times
  \fin[\tau] \ra \nats$ be the evaluation function of $\Omega$. Let $(R, F, S,
  \zeta):= \tau$, where $R = \{R_1, \ldots, R_{r}\}$, $F = \{ F_1, \ldots, F_{f}
  \}$, and $S = \{s_1, \ldots, s_{q}\}$. For each $i \in [r]$ and $j \in [f]$
  let $r_i$ denote the arity of $R_i$ and $f_j$ be the arity of $F_j$. Let
  $\tau' = (R', S', \zeta')$ such that
  \begin{itemize}
  \item $R' = \{R_1, \ldots, R_r, R_{r+1}, \ldots, R_{r+f}\}$,
  \item $S' = (s_1, \ldots, s_q, s_{q+1})$, and
  \item for all $R_i \in R'$, $\zeta' (R_i) = \zeta(R_i)$ if $R_{i+r} \in R$ and
    $\zeta'(R_{i+r}) = (s_{i, 1}, \ldots, s_{i, f_i + 1})$, where $(s_{i, 1},
    \ldots, s_{i, f_i}) = \zeta(F_{i})$ and $s_{i, f_i+1} = s_{q+1}$.
  \end{itemize}
  Let $r' = r + f$ and for all $i \in [r']$, $r_i'$ is the arity of $R_i'$. Let
  $\ar' : S' \times [2] \ra \nats$ be defined such that $\ar'(s, i) = \ar(s,i)$
  for all $(s, i) \in S \times [2]$, and $\ar'(s_{q+1}, 1) = 0$ and
  $\ar(s_{q+1}, 2) = t$. We associate with a structure $\mathcal{A} \in
  \fin[\tau']$ a structure $T(\mathcal{A}) \in \fin[\tau]$ defined by
  \begin{itemize}
  \item $T(\mathcal{A})$ has universe $\uplus_{i \in [q]}A_i$,
  \item for all $R_i \in R$, $R^{T(\mathcal{A})}_i = R^{\mathcal{A}}_i$, and
  \item for all $F_j \in F$, $F^{T(\mathcal{A})}_j(a_1, \ldots, a_{f_i}) = \vert
    \{ a \in A_{q+1}: (a_1, \ldots, a_{f_i}, a) \in R^{\mathcal{A}}_i\} \vert$.
  \end{itemize}
  Let $E': \nats^m \times \fin[\tau'] \ra \nats$ be defined such that
  $E'(\vec{a}, \mathcal{A}) = E(\vec{a}, T(\mathcal{A}))$ for all $(\vec{a},
  \mathcal{A}) \in \nats^m \times \fin[\tau']$.

  Let $\rho$ be a vocabulary. Let $\theta(\vec{x}) \in L(\Omega_{E,
    \ar})[\rho]$. We show by induction on the structure of the formula that for
  each sub-formula and sub-number-term of $\theta(\vec{x})$ there is a formula
  or number-term in $L(\Omega_{E', \ar'})$ that \emph{translates}
  $\theta(\vec{x})$, in that it has the same free variables and defines the same
  query. The only interesting case in this induction is an application of the
  operator. Let
  \begin{align*}
    \gamma = \Omega_{E, \ar} [\vec{\pi}] [\vec{\phi}^D, \vec{\phi}^{\approx}]  [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [r]}((\vec{y}^j_1 \vec{\nu}^j_1, \ldots, \vec{y}^j_{f_j} \vec{\nu}^j_{f_j})(\eta_j))_{j \in [f]}].
  \end{align*}
  be a sub-formula or sub-number-term. We then define
  \begin{align*}
    \gamma' = \Omega_{E', \ar'}[\vec{\pi}'][\vec{\psi}^D, \vec{\psi}^{\approx}] ((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i'} \vec{\mu}^i_{r_i'})(\psi_i))_{i \in [r']}.
  \end{align*}
  where
  \begin{itemize}
  \item $\vec{\pi}'$ is the translation of $\vec{\pi}$,
  \item $\vec{\psi}^D = (\psi^D_1, \ldots, \psi^D_{q}, \psi^D_{q+1})$, where for
    all $i \in [q]$, $\psi^D_i$ is the translation of $\phi^D_i$ and
    $\psi^D_{q+1}$ is a valid formula,
  \item $\vec{\psi}^{\approx} = (\psi^{\approx}_1, \ldots, \psi^{\approx}_q,
    \psi^{\approx}_{q+1})$, where for all $i \in [q]$, $\psi^{\approx}_i$ is the
    translation of $\phi^D_i$ and $\psi^{\approx}_{q+1}(\vec{\nu}_1,
    \vec{\nu}_2) := \vec{\nu}_1 = \vec{\nu}_2$,
  \item for all $i \in [r']$, and $j \in [r_i']$, $\vec{x}^i_j$ is a
    $\ar(\zeta(R_i')(j), 1)$-sequence of element variables $\vec{\mu}^i_j$ is a
    $\ar(\zeta(R_i')(j), 2)$ is a sequence of element variables, and
  \item for all $i \in [r']$, if $i \leq r$, then $\psi_i$ is the translation of
    $\chi_i$, otherwise let $\eta_{i - r}'$ be the translation of $\eta_{i - r}$
    and $\psi_i := \eta_{i-r}' < \vec{\mu}^i_{r_i'}$.
  \end{itemize}
  It can be shown that $\gamma'$ translates $\gamma$. Statement (1) follows.

  We next prove statement (3). Let $\ar^*: S' \times [2] \ra \nats$ be
  compatible with $\ar$ and let $L$ be an extension of $\FOC$. Let
  $\theta'(\vec{x}) \in L(\Omega_{E', \ar'})$. We again define a translation by
  induction on the structure of the formula. The only interesting case is the
  application of an operator. Let
  \begin{align*}
    \gamma' = \Omega_{E', \ar^*}[\vec{\pi}'][\vec{\psi}^D, \vec{\psi}^{\approx}] ((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i'} \vec{\mu}^i_{r_i})(\psi_i))_{i \in [r']}.
  \end{align*}
  be a sub-formula of $\theta'(\vec{x})$. Then define
  \begin{align*}
    \gamma = \Omega_{E, \ar} [\vec{\pi}] [\vec{\phi}^D, \vec{\phi}^{\approx}]  [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [r]}&((\vec{x}^j_1 \vec{\nu}^j_1, \ldots, \vec{y}^j_{f_j} \vec{\nu}^j_{f_j})(\eta_j))_{j \in [f]}].
  \end{align*}
  where
  \begin{itemize}
  \item $\vec{\pi}$ is a translation of $\vec{\pi}'$,
  \item $\vec{\phi} = (\phi^D_1, \ldots, \phi^D_{q})$, where for all $i \in
    [q]$, $\phi^D_i$ is the translation of $\psi^D_i$,
  \item $\vec{\phi}^{\approx} = (\phi^{\approx}_1, \ldots, \phi^{\approx}_q)$,
    where for all $i \in [q]$, $\phi^{\approx}_i$ is the translation of
    $\psi^D_i$,
  \item for all $j \in [f]$, $k \in [f_j]$, $\vec{y}^j_k = \vec{x}^{r + j}_k$
    and $\vec{\nu}^j_k = \vec{x}^{r+j}_k$, and
  \item for all $j \in [f]$, let $\vec{x}_j = \vec{x}^{r+i}_{r+f}$ and
    $\vec{\mu}_j = \vec{\mu}^{r+j}_{r+f}$, and $\eta_j :=
    \#_{\vec{x}\vec{\mu}}[\phi^D_{r+f},\phi^\approx_{r+f}](\psi_{r+j})_{j \in
      [f]}$.
  \end{itemize}

  It is easy to show that $\gamma'$ and $\gamma$ have the same free variables
  and the same semantics, and so statement (3) follows. Statement (2) follows
  from a very similar proof, except in this case we have that for each $j \in
  [f]$, and $R_{j+r}'$ the sort $\zeta'(R_{j+r})(f_i + 1)$ is defined using only
  numbers. It follows that we can replace the application of the counting
  operator above with a formula that includes a fixed-point operator. Statement
  (4) follows from statement (1) and (3).
\end{proof}

\begin{lem}
  Let $L$ be an extension of $\FOC$ and let $\setop$ be a set of generalised
  operators. Suppose $L(\setop)$ has constant number-width. It follows that
  there is a family of Boolean-valued generalised operators that act on formulas
  $\setop'$ such that $L(\setop) \equiv L(\setop')$.
\end{lem}

\begin{proof}
  From Lemma~\ref{lem:op-to-op-on-formulas} we may assume, without a loss of
  generality, that the operators in $\setop_E$ acts on formulas. Let $E' :
  \nats^{m + 1} \times \fin[\tau] \ra \{0,1\}$ be defined such that $E'(\vec{a},
  b, \mathcal{A}) = 1$ if, and only if, $E(\vec{a}, \mathcal{A}) = b$ for all
  $\vec{a} \in \nats^m$, $b \in \nats$, $\mathcal{A} \in \fin[\tau]$.

  We first show that $L(\setop_E) \leq L(\setop_{E'})$. Let $\theta(\vec{x}) \in
  L(\setop_E)$. We prove this result by induction on the structure of
  $\theta(\vec{x})$. Let $\gamma$ be a sub-formula or sub-number-term in
  $\theta(\vec{x})$. The interesting case is where $\gamma$ is an application of
  an operator in $\setop_E$. Suppose then
  \begin{align*}
    \gamma = \Omega_{E, \ar}[\vec{\pi}][\vec{\phi}^D, \vec{\phi}^{\approx}] ((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\phi_i))_{i \in [r]}.
  \end{align*}
  is a number term, and let $\psi(\vec{x})$ be a formula that contains $\gamma$
  and such that $\psi$ does not strictly contains a formula that contains
  $\gamma$. It follows that $\psi$ is of the form $\gamma X \delta$, where
  $\delta$ is a number term and $X$ is either `$=$' or `$\leq$'. Let
  $\vec{\epsilon}$ be a $t$-length vector of variables not in $\theta$ and
  assume we have already defined a number-term $\delta' \in L(\setop_{E'})$,
  that translates $\delta$. Let $\psi' = \exists \vec{\epsilon} \, \gamma' \land
  \, \vec{\epsilon} X \delta'$, where $\gamma'$ is a formula defined such that
  \begin{align*}
    \gamma' = \Omega_{E', \ar}[\vec{\pi}', (\epsilon_1 \cdot M + \ldots + \epsilon_t \cdot M^{t-1})][\vec{\psi}^D, \vec{\psi}^{\approx}] ((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\psi_i))_{i \in [r]}
  \end{align*}
  where
  \begin{itemize}
  \item $\vec{\pi}$ is a translation of $\vec{\pi}'$,
  \item $M = \#_x (x = x)$ and $M^{i}$ is short-hand for the $i$th power of $M$,
  \item $\vec{\psi} = (\psi^D_1, \ldots, \psi^D_{q})$, where for all $i \in
    [q]$, $\psi^D_i$ is the translation of $\phi^D_i$,
  \item $\vec{\psi}^{\approx} = (\psi^{\approx}_1, \ldots, \psi^{\approx}_q)$,
    where for all $i \in [q]$, $\psi^{\approx}_i$ is the translation of
    $\phi^D_i$, and
  \item for all $i \in [r]$, $\psi_i$ is the translation of $\phi_i$.
  \end{itemize}
  It can be shown that $\psi'$ translates $\psi$. It remains to show that
  $L(\setop_{E'}) \leq L(\setop_{E})$. The idea is to simply replace any
  application of a (Boolean-valued) operator in $\setop_{E'}$ with formula that
  tests for the equality. We omit the details here.
\end{proof}

It follows from Lemmas~\ref{} and~\ref{} that we may assume, without a loss of
generality, that so long as we are interested in logics that are extensions of
$\FOC$, any given set of generalised operators $\setop$ is normal.

% We have defined the extension of a logic by an operator so as to allow for the
% inclusion of man the operator we may also specify formulas (e.g.\
% $\vec{\phi}^D, \vec{\phi}^{\approx}$) that may be used to restrict the domain
% and introduce a quotienting operator.


% The definition of extending a logic by a family of operators the possibility
% of defining a many-sort interpretation as part of the application of the
% operator. In many cases extension of a logic by a family of Lindstr\"{o}m
% quantifiers does not allow for the taking of interpretations. We can similarly
% define for a logic $L$ and set of operators $\setop$ an extension
% $L^{~}(\setop)$ that is defined similarly, but that does not allow for any
% definition of a

% \begin{definition}
%   We say a logic $L(\setop)$ is \emph{closed under operator quotients} if
%   $L^{~}(\setop) = L(\setop)$.
% \end{definition}

% We state the following easy to prove lemma.

% \begin{lem}
%   The logics $\FP^{\nats}$, $\FPC$, and $\FPR$ are closed under operator
%   quotients.
%   \label{lem:logics-operator-quotients}
% \end{lem}



% For each $i \in [q]$ let $B_i = \phi^D_i / \phi^{\approx}_i$. Let $i \in
% [l_1]$. For each $j \in [r_i]$ let $e_j \in B_{\zeta(R_i)(j)}$. We define
% $R^B_i$ by $(e_1, \ldots, e_{r_i}) \in R^{B}_i$ if, and only if, there exists
% $(\vec{a}_1 \vec{m}_1, \ldots , \vec{a}_{r_i} \vec{m}_{r_i})$ where $\vec{a}_j
% \vec{m}_j \in e_j$ for all $j \in [r_i]$ and $\mathcal{A} \models \theta_i
% [\vec{a}_1\vec{m}_1, \ldots, \vec{a}_{r_i} \vec{m}_{r_i}]$. We define
% $F^{B}_j$ such that $F^B_j (e_1, \ldots, e_{f_j}) = k$ there exists
% $(\vec{a}_1, \vec{m}_1, \ldots , \vec{a}_{r_i} \vec{m}_{r_i})$ such that
% $\vec{a}_j \vec{m}_j \in e_j$ for all $j \in [f_i]$ where $\mathcal{A} \models
% (k = \nu_i [\vec{a}_1, \vec{m}_1, \ldots , \vec{a}_{r_i} \vec{m}_{r_i}])$. Let
% $\mathcal{B}$ be the structure defined from the above. We have $\mathcal{A}
% \models (k = ...)$ if, and only if, $E(\vec{\pi}^{\mathcal{A}},
% \vec{\phi}^{\mathcal{A}}, \mathcal{B}) = k$.


% \begin{definition}
%   Let $\Omega_{E, \ar}$ be a many-sorted operator. We say $\Omega_{E, \ar}$
%   \emph{operates on formulas} if there are no function symbols in the
%   vocabulary of $\Omega_{E, \ar}$. We say that $\Omega_{E, \ar}$ \emph{has no
%   parameters} if the parameter-width is zero. We say $\Omega_{E, \ar}$ is
%   \emph{numberless} if it operates on formulas and for all $s \in S$, $\ar(s,
%   2) = 0$. We call a numberless Boolean operator a \emph{many-sorted
%   quantifier}.
% \end{definition}

% \begin{lem}
%   Let $L$ be a logic and $\setop$ be a set of operators. There is a set of
%   operators $\setop^*$ each of which operate on formulas such that $L(\setop)
%   \equiv L(\setop^*)$.
% \end{lem}
% \begin{proof}
  
% \end{proof}

% It follows that we may assume, without a loss of generality, that a given set
% of operators act on formulas.


% We say that $L(\setop)$ is \emph{closed under operator quotients} if each
% query in $L(\setop)$ can be expressed in

% $\equiv L(\setop^-)$.

% We

% \begin{definition}
%   Let $\Omega$ be an operator. Let $\setop$ be a set of operators. Let
%   $\setop^- = \{\Omega^- : \Omega \in \setop\}$. We say that $L(\setop)$ is
%   \emph{closed under operator quotients} if $L(\setop) \equiv L(\setop^-)$.
% \end{definition}

% \begin{lem}
%   $\FPR$ and $\FPC$ are closed under operator quotients.
% \end{lem}

% \begin{lem}
  
% \end{lem}

% \subsection{Boolean-Valued Operators}
% We can add a number term parameter and the operator evaluates to a value equal
% to this number term.

% \subsection{Operators on Formulas}
% We can replace each number term with a formula with an extra type. Summation
% over this extra type gets you back to the previous formula.

% We may thus assume, without a loss of generality, that the operators only
% operate on formulas and are Boolean valued.

\subsection{Extended Quantifiers}
Many of the logics that are of interest to us, including $\FPC$ and $\FPR$, can
be defined as extension of $\FP^{\nats}$ by generalised operators. The study of
these logics often reduces to the study of a corresponding bounded-variable
infinitary logic without number sorts (e.g.\ $\mathcal{C}^\omega$).

We aim to develop a general way of associating with each logic extended by a set
of generalised operators with an appropriate infinitary logic. Before we do so,
we need to show how to associate a set of operators with an appropriate set of
quantifiers that make no reference to a number sort. In this subsection we
introduce \emph{extended quantifiers}.

Let $\tau = (R, S, \zeta)$ be a many-sorted vocabulary where $R = \{R_1, \ldots,
R_{r}\}$, and $S = \{s_1, \ldots, s_{q}\}$. For each $i \in [r]$ let $r_i$
denote the arity of $R_i$. Let $m \in \nats$, $E : \nats^{m} \times \fin[\tau]
\ra \{0,1\}$ be isomorphism-closed, and let $\ar : S \times [2] \ra \nats$. We
associate with the pair $(E, \ar)$ and tuple $(\vec{p}, n) \in \nats^{m} \times
\nats$ an \emph{extended quantifier} $Q^{E, \ar}_{\vec{p},n}$. For a logic $L$
the extension $L(Q^{E, \ar}_{\vec{p},n})$ is defined by extending the
formula-formation rule for $L$ as follows:
\begin{textbox}[13.8cm]
  For each $i \in [r]$, $l \in [r_i]$ let $s^i_l = \zeta (R_i)(l)$ and let
  $c^i_l = \ar(s^i_l, 2)$. Let $T^i_n := [n]^{c^i_l} \times , \ldots, \times
  [n]^{c^i_{r_i}}$ and let $T_n$ be the function that maps $i \in [r]$ to
  $T^i_n$. Let $\Upsilon_i : T^i_n \ra L(Q^{E, \ar}_{\vec{p}, n})$ and let
  $\vec{x}^i_l$ be an $\ar(s^i_l, 1)$-length tuple of element variables. Then
  $\phi := Q^{E, \ar}_{\vec{p}, n} [(\vec{x}^i_1, \ldots, \vec{x}^i_{r_i}) \cdot
  \Upsilon_i]_{i \in [r]}$ is a formula in $L(Q^{E, \ar}_{\vec{p}, n})$. Let
  $\free{\phi} := \bigcup_{i \in [r], a \in
    \dom(\Upsilon_i)}(\free{\Upsilon_i(a)} \setminus (\bigcup_{j \in
    [r_i]}\vec{x}^i_j))$.
\end{textbox}
The semantics of the formula $\phi$ is defined for some structure $\mathcal{A}
\in \fin[\rho]$ and assignment $\alpha$
\begin{textbox}[13.8cm]
  Let $\mathcal{A}$
  \begin{align*} \chi_i (\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i}
    \vec{\mu}^i_{r_i}) = \bigvee_{\vec{a}_1, \ldots,
      \vec{a}_{r_i}}[(\bigwedge_{j \in [r_i]} \vec{\mu}^i_j= \vec{a}_j) \land
    \upsilon_i(\vec{a}_1, \ldots, \vec{a}_{r_i})(\vec{x}^i_1, \ldots,
    \vec{x}^i_{r_i})].
  \end{align*}
  Let $\mathcal{I}$ be the interpretation with trivial domain and equality
  formulas and with relations defined by $(\chi_i)_{i \in [r]}$. We have that
  $\mathcal{A} \models \phi$ if, and only if, $E(\vec{p},
  \mathcal{I}(\mathcal{A})) = 1$.
\end{textbox}
Let $\setop$ be a set of generalised operators. 
\section{Translating Formulas to Substitution Programs}
We now introduce the notion of a substitution program. A substitution program is
a finite sequence of formulas such that each formula may contain second-order
variables that correspond to formulas that come later in the sequence. The idea
is that a substitution program is a `compact' way of writing a formula, one that
allows formulas to repeatedly apply a formula without having to rewrite it each
time. We use substitution programs as a step towards our translation to
circuits. We also show that each substitution program can be translated to an
equivalent formula of an infinitary logic.

\begin{definition}
  Let $L$ be a logic and $\rho$ be a vocabulary. A $L[\rho]$-\emph{substitution
    program} is a sequence of formulas $\Phi := (\phi_1(\vec{y}_1, \vec{\mu}_1;
  \boldsymbol{V}_1), \ldots, \phi_k(\vec{y}_k, \vec{\mu}_i;\boldsymbol{V}_k))$,
  such that there is a sequence $V_1, \ldots, V_k$ of second-order variables and
  for each $i \in [k]$:
  \begin{itemize}
  \item $\phi_i$ is a formula in $L[\rho]$,
  \item $\vec{y}_i$ and $\vec{\mu}_i$ are sequences of element and number
    variables, respectively,
  \item $V_i$ has the same type as $(\vec{y}_i, \vec{\mu}_i)$, and
  \item $\boldsymbol{V}_i \subseteq \{V_j : i < j \leq k\}$.
  \end{itemize}
  The \emph{flattening} of a substitution program $\Phi$ is a formula
  $\phi(\vec{y}_1, \vec{\mu}_1)$ defined by taking $\phi_1$ and recursively
  replacing each second-order variable $V_i$ with the formula $\phi_i$. Let
  $\alpha$ be an assignment to the variables $\vec{y}_1$ and $\vec{\mu}_1$. Let
  $\mathcal{A} \in \fin[\tau]$. We write $\mathcal{A} \models \Phi[\alpha]$ to
  abbreviate $\mathcal{A} \models \phi[\alpha]$, where $\phi$ is the flattening
  of $\Phi$.

  The \emph{formula-length} of a substitution program $\Phi$ is the maximal
  length (i.e.\ number of symbols) of the formulas in $\Phi$. The \emph{width}
  of a substitution program is the maximum width of a formula appearing in the
  program.
\end{definition}

The proof of the following result follows from the standard `unrolling' of the
fixed-point operators. For more detail please see~\cite{}.

\begin{lem}
  Let $\setop$ be a set of generalised operators. Let $\setquant$ be the
  associated family of extended quantifiers. If a query can be defined in
  $\FP^{\nats} (\setop)$ then it can be defined by a $\PT$-uniform family of
  $\FO^{\nats} (\setop)$-substitution programs with a constant bound on the
  width and formula-length.
\end{lem}

% \begin{lem}
%   Let $\setop$ be a set of unrestricted operators. For each $n \in \nats$ let
%   $\setquant$ be the corresponding set of number domain non-uniform
%   number-domain non-quotienting quantifiers generated by $\setop$. Let
%   $\theta(\vec{x}, \vec{\mu}) \in \FO^{\nats} (\setop)$ be a formula defined
%   in terms of the mixed-sort relation variables $V_1, \ldots, V_k$. Let $m =
%   \vert \vec{\mu} \vert$ and for each $i \in [k]$ let $v_i$ be the arity of
%   the element sort and let $m_i$ be the arity of the number sort in $V_i$. Let
%   $n \in \nats$. For each $i \in [k]$ and $\vec{b} \in [n]^{m_i}$ we define an
%   element-sort relation variable $V_{\i, vec{b}}$ of arity $v_i$. There exists
%   a sequence of $\FO(\setquant)$ formulas $\{\theta_{\vec{a}}(\vec{x}) :
%   \vec{a} \in [n]^{m}\}$ where each $\theta_{\vec{a}}(\vec{x})$ is defined in
%   terms of the relation variables $\bigcup_{i \in [k]} \{V_{i, \vec{b}} :
%   \vec{b} \in [n]^{m_i}\}$.
% \end{lem}
% \begin{proof}
%   We say that a number term $\eta(\vec{y}, \vec{\nu})$ in
%   $\FO^{\nats}(\setop)$ has a \emph{translation for $n$} if there is a
%   sequence of $\FO(\setquant)$-formulas $(\phi^{\eta}_{n, k;
%   \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}$ such that for each
%   $\tau$-structure $\mathcal{A}$ of size $n$ and for each assignment $\alpha
%   \in [n]^{\vec{y}}$ we have that $\mathcal{A} \models \phi^{\eta}_{n, k;
%   \beta}[\alpha]$ if, and only if, $\mathcal{a} \models (\eta = k)[\alpha \cup
%   \beta]$.

%   We say a formula $\psi(\vec{y}, \vec{\nu})$ in $\FO^{\nats}(\setop)$ has a
%   \emph{translation for $n$} if there is a sequence of
%   $\FO(\setquant)$-formulas $(\phi_{n; \beta} (\vec{y}))_{\beta \in
%   [n]^{\vec{\mu}}}$ such that each $\tau$-structure $\mathcal{A}$ of size $n$
%   and each assignment $\alpha \in [n]^{\vec{y}}$, we have that $\mathcal{A}
%   \models \phi_{n; \vec{\beta}}[\alpha]$ if, and only if, $\mathcal{A} \models
%   \phi[\alpha \cup \beta]$.

%   We aim to show that $\theta(\vec{x}, \vec{\mu})$ has a \emph{translation for
%   $n$} by induction on the structure of the formula. It is easy to see that if
%   $\eta(\vec{y}, \vec{\nu})$ is a number variable or a constant (i.e. $0$ or
%   $1$) then $\eta$ has a translation for $n$. In the case that $\psi(\vec{y})$
%   is a formula is a formula containing no number terms then there is an
%   obvious translation for $n$. If $psi(\vec{y}, \vec{\nu}) = V_i(\vec{y},
%   \vec{\nu})$ then the assignment $\psi_{n; \beta}(\vec{y}) = V_{i,
%   \beta(\vec{\nu})}$ defines a translation.

%   Let $\eta(\vec{y}, \vec{\nu})$ be a number term and suppose all sub-formulas
%   and sub-number-terms of $\eta$ have a translation for $n$. Let $\beta \in
%   [n]^{\vec{\nu}}$. Suppose $\eta(\vec{y}, \vec{\nu}) = \eta_1(\vec{y}_1,
%   \vec{\nu}_1) \cdot \eta_2(\vec{y}_2, \vec{\nu}_2)$. Let $\beta_1 \in
%   [n]^{\vec{nu}_1}$ and $\beta_2 \in [n]^{\vec{nu}_2}$ be assignments
%   compatible with $\beta$. Let $\psi^{\eta}_{n, k ; \beta} (\vec{y}) =
%   \underset{a, b \leq k, a \cdot b = k}{\bigvee}(\psi^{\eta)_1}_{n, a;
%   \beta}(\vec{x}) \land \psi^{\eta_2}_{n, b; \beta}(\vec{x}))$. The other
%   arithmetic cases are handled similarly.

%   We now consider the application of an operator. Let $\Omega \in \setop$ and
%   suppose

%   \begin{align*}
%   \eta(\vec{y}, \vec{\nu}) = \Omega_{E} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [l]}].
% \end{align*}
% For each $i \in [l]$ let $T_i = [n]^{c_1} \times , \ldots, \times
% [n]^{c_{r_i}}$. Let $T$ be a function that maps $i \in [l]$ to $T_i$. where
% $c_{j}$ is the arity of ...
% \begin{align*}
%   \psi^{\eta}_{n, k; \beta}(\vec{x}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert}, e \leq M}[&(\bigwedge_{i \leq \vert \vec{\pi}\vert} \psi^{\pi_{i}}_{n, p_i; \beta}(\vec{x})) \\ &\land Q_{E, T ; (p_1, \ldots, p_n); e} ((\vec{x}^{j, \vec{t}}_1, \ldots, \vec{x}^{j, \vec{t}}_{r_i}) \cdot (\chi_{i, \vec{t}})_{ n; \beta})_{j \in [l], \vec{t} \in T_j}]
% \end{align*}
% \end{proof}

% \begin{lem}
%   Let $\setop$ be a set of non-quotienting operators. Let $\setquant :=
%   \setquant_{\setop}$ be the corresponding set of extended quantifiers. If a
%   query can be defined by a $\PT$-uniform family of $\FO^{\nats} (\setop)$
%   substitution programs formulas then it can be defined by a $\PT$-uniform
%   family of $\FO (\setquant)$ substitution programs
% \end{lem}
% \begin{proof}
%   Let $\rho$ be a vocabulary. Let $(f_n : [M_n] \ra \FO^{\nats} \ra
%   \FO^{\nats}(\setop)[\tau])_{n \in \nats}$ be a $\PT$-uniform family of
%   $\FO^{\nats}(\setop)[\tau]$ of substitution programs.
% \end{proof}

% The proof of the following result follows from the standard `unrolling' of the
% fixed-point operators. For more detail please see~\cite{}.

% \begin{lem}
%   Let $\setop$ be a set of operators. If a query can be defined in
%   $\FP^{\nats} (\setop)$ then it can be defined by a $\PT$-uniform family of
%   $\FO^{\nats} (\setquant)$ substitution programs with constant program-width
%   and relation-width.
% \end{lem}
We aim to show that every $\PT$-uniform family of $\FO^{\nats}
(\setop)$-substitution programs with bounded formula-length and width can be
translated to $\PT$-uniform families of $\FO(\setquant)$-substitution programs.
We do this in two stages. First we show that each formula in a $\FO^{\nats}
(\setop)$-substitution program may be translated to a substitution program in
$\FO(\setquant)$. Second, we show that each by applying this translation to each
formula in each member of a $\PT$-uniform family of $\FO(\setquant). $combining
each of these translations we can translate


. In other words, we want to be able to remove the number sort. Let $\rho$ be a
vocabulary and let $\setop$ be a set of operators. Let $\setquant$ be a
corresponding set of extended quantifiers. Let $\theta (\vec{x}, \vec{\mu};
\vec{V})$ be a formula in $\FO^{\nats}(\setop)[\rho]$, where $\vec{V} = (V_1,
\ldots, V_v)$ is a sequence of mixed-sort second-order variables such that for
each $i \in [v]$, $V_i$ has arity $(v_i, m_i)$.

Let $n \in \nats$. Let $\boldsymbol{\theta}_n = \{\theta_{n; \beta}(\vec{x};
\vec{V}^n_1, \ldots, \vec{V}^n_{v}) : \beta \in [n]^{\vec{\mu}} \}$ in
$\FO(\setquant)[\rho]$, where for each $i \in [v]$ we have $\vec{V}^n_i =
(V^n_{i, \vec{a}})_{\vec{a} \in [n]^{m_i}}$ where $V^n_{i, \vec{a}}$ is an
element-sort second-order variable with arity $v_i$.

We say $\boldsymbol{\theta}_n$ \emph{translates $\theta$ for $n$} if for all
\begin{enumerate}
\item $\mathcal{A} \in \fin[\rho, n]$,
\item assignments $\alpha \in A^{\vec{x}}$ and $\beta \in [n]^{\vec{\mu}}$, and
\item assignments $\gamma$ and $\gamma'$, where $\gamma$ maps $V_i$ to
  $V^{\gamma}_i \subseteq A^{v_i} \times [n]^{m_i}$ and $\gamma'$ maps $V^n_{i,
    \vec{b}}$ to $V^{n, \gamma'}_{i, \vec{b}} \subseteq A^{v_i}$ such that
  $(\vec{a}, \vec{b}) \in V^{\gamma}_{i}$ if, and only if, $\vec{a} \in V^{n,
    \gamma'}_{i, \vec{b}}$ then
\end{enumerate}
\begin{align*}
  \mathcal{A} \models \theta [\alpha , \beta, \gamma]  \iff \mathcal{A} \models \theta_{n, \beta} [\alpha, \gamma'].
\end{align*}
We say $\boldsymbol{\theta} = (\boldsymbol{\theta}_n)_{n \in \nats}$ translates
$\theta$ if $\boldsymbol{\theta}_n$ translates $\theta$ for all $n \in \nats$.

We similarly define a \emph{translation} for number-terms. Let $\eta(\vec{x},
\vec{\mu}, \vec{V})$ be a number term and let $n \in \nats$. We say that
$\boldsymbol{\theta}^{\eta}_n = \{\theta^{\eta}_{n, k; \beta}(\vec{x},
\vec{V}^n_1, \ldots, \vec{V}^n_{v}) : k \in \nats, \beta \in [n]^{\vec{\mu}} \}$
\emph{translates} $\eta$ for $n$ if for all $k \in \nats$ and all $\mathcal{A}$,
$\alpha$, $\beta$, $\gamma$, and $\gamma'$ defined as above we have
\begin{align*}
  \eta^{(\mathcal{A}, \alpha, \beta, \gamma)} = k \iff \mathcal{A} \models \theta^{\eta}_{n, k; \beta}[\alpha, \gamma'].
\end{align*}
We are now ready to prove that a formula that appears in a
$\FO^\nats(\setop)$-substitution program may be translated to a sequence of
$\FO(\setquant)$-formulas, where $\setquant$ is the set of extended quantifiers
associated with $\setop$.

\begin{lem}
  \label{lem:translate-program-line}
  Let $\rho$ be a vocabulary. Let $\setop$ be a set of normal operators and let
  $\setquant$ be the corresponding set of extended quantifiers. Suppose
  $\FO^{\nats}(\setop)$ is closed under operator quotients and has constant
  numeric-width. Let $\theta(\vec{x}, \vec{\mu};\vec{V}) \in \FO^{\nats}
  (\setop)[\rho]$ be a formula defined in terms of the second-order variables
  $\vec{V} = (V_1, \ldots, V_v)$. Let $t$ be the numeric-width and $w$ be the
  number-variable width of $\theta$.
  
  There exists a set of formulas $\boldsymbol{\theta} = \{\theta_{n,
    \beta}(\vec{x}; \vec{V}^n_1, \ldots, \vec{V}^n_{v}) : n \in \nats, \beta \in
  [n]^{\vec{\mu}} \}$ in $\FO(\setquant)[\rho]$ that translate $\theta$. We also
  have that each formula in $\boldsymbol{\theta}$ has width less than the
  element-width of $\theta$. Moreover, the function that maps $(n, \theta)$ to
  $(\theta_{n, \beta})_{\beta \in [n]^{\vec{\mu}}}$ is computable in time
  $c^{\vert \cl{\theta} \vert} \cdot n^{c \cdot \vert \cl{\theta} \vert \cdot (t
    + w)}$ for some constant $c$.
\end{lem}
% \begin{lem}
%   Let $\rho$ be a vocabulary. Let $\setop$ be a set of unrestricted operators
%   and let $\setquant$ be the corresponding set of extended quantifiers. Let $n
%   \in \nats$ and let $\theta(\vec{x}, \vec{\mu}) \in \FO^{\nats}
%   (\setop)[\rho]$ be a formula defined in terms of the mixed-sort relation
%   variables $V_1, \ldots, V_k$. Let $m = \vert \vec{\mu} \vert$ and for each
%   $i \in [k]$ let $v_i$ be the arity of the element sort and let $m_i$ be the
%   arity of the number sort in $V_i$. For each $i \in [k]$ and $\vec{b} \in
%   [n]^{m_i}$ we define an element-sort second-order variable $V_{i, \vec{b}}$
%   of arity $v_i$.

%   There exists a sequence of $\FO(\setquant)[\rho]$ formulas $\bd{\theta} =
%   \{\theta_{\vec{a}}(\vec{x}) : \vec{a} \in [n]^{m}\}$ where each
%   $\theta_{\vec{a}}(\vec{x})$ is defined in terms of the relation variables
%   $\bigcup_{i \in [k]} \{V_{i, \vec{b}} : \vec{b} \in [n]^{m_i}\}$ and such
%   that if

%   \begin{enumerate}
%   \item $\mathcal{A} \in \fin[\tau, n]$,
%   \item $\alpha \in A^{\vec{x}}$, and $\beta \in [n]^{\vec{\mu}}$ are
%     assignments, and
%   \item $\gamma$ is an assignment to the second-order variables that maps
%     $V_i$ to $V^{\gamma}_i \subseteq A^{v_i} \times [n]^{m_i}$ and $\gamma'$
%     is an assignment that maps $V_{i, \vec{b}}$ to $V^{\gamma'}_{i, \vec{b}}
%     \subseteq A^{v_i}$ such that $(\vec{a}, \vec{b}) \in V^{\gamma}_{i}$ if,
%     and only if, $\vec{a} \in V_{i, \vec{b}}$ then
%   \end{enumerate}
%   \begin{align*}
%     \mathcal{A} \models \theta [\alpha , \beta, \gamma] \iff \mathcal{A}
%     %     \models \theta_{\beta(\vec{\mu})} [\alpha, \gamma'].
%   \end{align*}

%   Moreover, we have that the function that maps $(n, \theta(\vec{x,
%   \vec{\mu}})$ to $\bd{\theta}$ is computable in $p(n^{\width(\theta)} \cdot
%   )$.
% \end{lem}
\begin{proof}
  Let $n \in \nats$. We aim to recursively define a translation for $n$ for each
  formula and number-term in $\theta$. That is, for a sub-formula or
  sub-number-term $\gamma(\vec{y}, \vec{\nu} ; \vec{V})$ of $\theta$ we define a
  translation of $\gamma$ for $n$ given translations of the sub-formulas and
  sub-number-terms of $\gamma$ for $n$. More precisely, if $\gamma$ is a
  number-term we will define a sequence of $\FO(\setquant)[\rho]$-formulas
  $\boldsymbol{\phi}^{\gamma}_n = \{\phi^{\gamma}_{n, k; \beta}(\vec{y};
  \vec{V}^n_1, \ldots, \vec{V}^n_{v}) : \beta \in [n]^{\vec{\nu}}, k \in
  \nats\}$ that translates $\gamma$ for $n$ and if $\gamma$ is a formula we will
  define a sequence $\boldsymbol{\phi}^{\gamma}_n = \{\phi^{\gamma}_{n ;
    \beta}(\vec{y}; \vec{V}^n_1, \ldots, \vec{V}^n_v): \beta \in [n]^{\vec{\nu}}
  \}$ that translates $\gamma$ for $n$. We prove this result by considering
  cases. In each case we let $\gamma_1, \gamma_2, \ldots$ denote the
  sub-formulas or sub-number-terms of $\gamma$ and we use $\beta$ to denote an
  arbitrary assignments to the free number variables in $\gamma$.

  We first consider the base cases. Suppose $\gamma$ is a number-variable or a
  constant (i.e.\ $0$ or $1$). If $\gamma$ evaluates to $k$ under the assignment
  $\beta$ let $\phi^{\gamma}_{n, k; \beta}$ be a tautology and otherwise let
  $\phi^{\gamma}_{n, k; \beta}$ be a contradiction. Suppose $\gamma$ is an
  atomic formula or (non-number) term. If the free variables in $\psi$ are all
  element variables then let $\phi^{\gamma}_{n; \beta} = \gamma$. If
  $\gamma(\vec{y}, \vec{\nu}; \vec{V}) = V_i(\vec{y}, \vec{\nu})$ for some $i
  \in [v]$ then let $\phi^{\gamma}_{n; \beta}(\vec{y}) = V^n_{i,
    \beta(\vec{\nu})}$. This suffices to give a translation of $\gamma$ for $n$
  for this case.

  We now handle the multiplication case. The other arithmetic functions may be
  handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V})$ is a number
  term and suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) = \gamma_1(\vec{y}_1,
  \vec{\nu}_1; \vec{V}) \cdot \gamma_2(\vec{y}_2, \vec{\nu}_2; \vec{V})$. Let
  $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in [n]^{\vec{\nu}_2}$ be
  compatible with $\beta$, then for each $k \leq n^{t}$ let
  \begin{align*}
    \phi^{\gamma}_{n, k ; \beta} (\vec{y}) =
    \uset{a, b \leq k}{ a \cdot b = k}{\bigvee}(\phi^{\gamma_1}_{n, a;
    \beta_1}(\vec{y}) \land \phi^{\gamma_2}_{n, b; \beta_2}(\vec{y})).
  \end{align*}

  We now handle the less-than relation for number-terms. The equality relation
  may be handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) =
  \gamma_1(\vec{y}_1, \vec{\nu}_1; \vec{V}) \leq \gamma_2 (\vec{y}_2,
  \vec{\nu}_2 ; \vec{V})$. Let $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in
  [n]^{\vec{\nu}_2}$ be compatible with $\beta$, and let
  \begin{align*}
    \phi^{\gamma}_{n; \beta} = \uset{a, b \leq n^t}{a \leq
    b}{\bigwedge} \phi^{\gamma_1}_{n, a; \beta_1} \land \phi^{\gamma_2}_{n, b;
    \beta_2}.
  \end{align*}
  
  We now handle conjunction between formulas. The other logical connectives may
  be handled similarly. Suppose $\gamma(\vec{y}, \vec{\nu}; \vec{V}) =
  \gamma_1(\vec{y}_1, \vec{\nu} ; \vec{V}) \land \gamma_2 (\vec{y}_2,
  \vec{\nu}_2 ; \vec{V})$. Let $\beta_1 \in [n]^{\vec{\nu}_1}$ and $\beta_2 \in
  [n]^{\vec{\nu}_2}$ be compatible with $\beta$. Let $\phi^{\gamma}_{n ; \beta}
  = \phi^{\gamma_1}_{n ; \beta_1} \land \phi^{\gamma_2}_{n ; \beta_2}$.

  We now handle the operator case. Let $\Omega_{E, \ar} \in \setop$ and suppose
  \begin{align*}
    \gamma(\vec{y}, \vec{\nu}; \vec{V}) = \Omega_{E, \ar} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [r]}].
  \end{align*}
  For each $i \in [r]$, $l \in [r_i]$ let $s^i_l = \zeta(R_i)(l)$ and $c^i_l =
  \ar(s^i_l, 2)$. Let $T^i_n := [n]^{c^i_l} \times , \ldots, \times
  [n]^{c^i_{r_i}}$. Let $\Upsilon_i : T^n_i \ra \FO(\setquant)[\rho]$ be defined
  by $\Upsilon_i (\vec{m}_1, \ldots, \vec{m}_{r_i}) = \phi^{\chi_i}_{n ;
    \beta_i}$, where $\beta_i$ is an assignments to all the free number
  variables in $\chi_i$ such that (i) $\beta_i$ agrees with $\beta$ for each
  variable in $\vec{\nu}$ not bound by the operator and (ii) $\beta_i$ assigns
  $\vec{\mu}^i_{j}$ to $\vec{m}_j$ for each $j \in [r_i]$. For each $i \in
  [\vert \pi \vert]$ let $\alpha_i$ be an assignment to the free number
  variables in $\vec{\pi}(i)$ compatible with $\beta$. Let
  \begin{align*}
    \phi^{\gamma}_{n; \beta}(\vec{y}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert} \leq n^t}[(\bigwedge_{i \in [\vert \vec{\pi}\vert]} \phi^{\pi(i)}_{n, p_i; \alpha_i}(\vec{y})) \land Q^{E, \ar}_{n, (p_1, \ldots, p_{\vert \vec{\pi} \vert})} ((\vec{x}^{j}_1, \ldots, \vec{x}^{j}_{r_j}) \cdot \Upsilon_j)_{j \in [r]}].
  \end{align*}
  
  We can think of the $\forall$ and $\exists$ quantifiers as generalised
  operators, and so these case are subsumed by the operator case. There is an
  obvious recursive algorithm implementing the construction above. It can be
  shown by reviewing each of the above cases that the cost of computing the
  translation for a sub-formula or sub-number-term $\gamma (\vec{y}, \vec{\nu} ;
  \vec{V})$ is at most $(c_1 \cdot n^{c_2 \cdot (t_{\gamma} + w_{\gamma} )}
  \cdot X)$, where $c_1$ and $c_2$ are constants, $t_{\gamma}$ and $w_{\gamma}$
  are the numeric-width of $\gamma$ and number-variable width, respectively, and
  $X$ is the maximal cost of translating a sub-formula or sub-number-term of
  $\gamma$. It follow that for a given $n$ and $\theta$ we can construct a
  family of formulas $\boldsymbol{\theta}_n$ that translates $\theta$ for $n$ in
  at most $c^{\vert \cl{\theta} \vert}_1 \cdot n^{c_2 \vert \cl{\theta} \vert
    \cdot (t + w)}$. The result follows.
\end{proof}

% \begin{lem}
%   Let $\setop$ be a set of non-quotienting operators. Let $\setquant :=
%   \setquant_{\setop}$ be the corresponding set of extended quantifiers. If a
%   query can be defined by a $\PT$-uniform family of $\FO^{\nats} (\setop)$
%   substitution programs with constant program-width and relation-width then it
%   can be defined by a $\PT$-uniform family of $\FO (\setquant)$ substitution
%   programs.
% \end{lem}
% \begin{proof}
%   Let $\rho$ be a vocabulary. Let $I = (I_n : [M_n] \ra \FO^{\nats} \ra
%   \FO^{\nats}(\setop)[\tau])_{n \in \nats}$ be a $\PT$-uniform family of
%   substitution programs. Let $n \in \nats$. For each $w \in [M_n]$ let
%   $\theta_w (\vec{x}) := I_n(w)$. For each mixed-sort second-order variable
%   $V_i$ with arity $(v_i, m_i)$ we define a family of element-sort
%   second-order variables $\mathbb{V}_i = \{V_{i, \vec{a}} : \vec{a} \in
%   [n]^{m_i}\}$ such that $v_{i, \vec{a}}$ is the arity of $V_{i, \vec{a}}$.

%   Fix $w \in [M_n]$ and let $\theta_{n,w} (\vec{x}, \vec{\mu}) := I_n(w)$. We
%   aim to define for each number term $\eta(\vec{y}, \vec{\nu})$ appearing in
%   $\theta_w(\vec{x}, \vec{\mu})$ a sequence of $\FO(\setquant)[\rho]$-formulas
%   $\{\phi^{\eta}_{n, w; k; \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}) :
%   \beta \in [n]^{\vec{\nu}}, k \in \nats\}$.
  
%   We say that a number term $\eta(\vec{y}, \vec{\nu})$ in
%   $\FO^{\nats}(\setop)$ has a \emph{translation for $n$} if there is a
%   sequence of $\FO(\setquant)$-formulas $(\phi^{\eta}_{n, k;
%   \beta}(\vec{y}))_{\beta \in [n]^{\vec{\nu}}}$ such that for each
%   $\rho$-structure $\mathcal{A}$ of size $n$ and for each assignment $\alpha
%   \in [n]^{\vec{y}}$ we have that $\mathcal{A} \models \phi^{\eta}_{n, k;
%   \beta}[\alpha]$ if, and only if, $\mathcal{a} \models (\eta = k)[\alpha \cup
%   \beta]$.

%   We say a formula $\psi(\vec{y}, \vec{\nu})$ in $\FO^{\nats}(\setop)$ has a
%   \emph{translation for $n$} if there is a sequence of
%   $\FO(\setquant)$-formulas $(\phi_{n; \beta} (\vec{y}))_{\beta \in
%   [n]^{\vec{\mu}}}$ such that each $\tau$-structure $\mathcal{A}$ of size $n$
%   and each assignment $\alpha \in [n]^{\vec{y}}$, we have that $\mathcal{A}
%   \models \phi_{n; \vec{\beta}}[\alpha]$ if, and only if, $\mathcal{A} \models
%   \phi[\alpha \cup \beta]$.

%   We aim to show that $\theta(\vec{x}, \vec{\mu})$ has a \emph{translation for
%   $n$} by induction on the structure of the formula. It is easy to see that if
%   $\eta(\vec{y}, \vec{\nu})$ is a number variable or a constant (i.e. $0$ or
%   $1$) then $\eta$ has a translation for $n$. We also have that if
%   $\psi(\vec{y})$ is a formula then $\psi(\vec{y})$ is its own translation for
%   $n$. If $psi(\vec{y}, \vec{\nu}) = V_i(\vec{y}, \vec{\nu})$ then the
%   assignment $\psi_{n; \beta}(\vec{y}) = V_{i, \beta(\vec{\nu})}$ defines a
%   translation for $n$.

%   Let $\eta(\vec{y}, \vec{\nu})$ be a number term and suppose all sub-formulas
%   and sub-number-terms of $\eta$ have a translation for $n$. Let $\beta \in
%   [n]^{\vec{\nu}}$. Suppose $\eta(\vec{y}, \vec{\nu}) = \eta_1(\vec{y}_1,
%   \vec{\nu}_1) \cdot \eta_2(\vec{y}_2, \vec{\nu}_2)$. Let $\beta_1 \in
%   [n]^{\vec{nu}_1}$ and $\beta_2 \in [n]^{\vec{nu}_2}$ be assignments
%   compatible with $\beta$. Let $\psi^{\eta}_{n, k ; \beta} (\vec{y}) =
%   \underset{a, b \leq k, a \cdot b = k}{\bigvee}(\psi^{\eta)_1}_{n, a;
%   \beta}(\vec{x}) \land \psi^{\eta_2}_{n, b; \beta}(\vec{x}))$. The other
%   arithmetic cases are handled similarly.

%   We now consider the application of an operator. Let $\Omega \in \setop$ and
%   suppose

%   \begin{align*}
%   \eta(\vec{y}, \vec{\nu}) = \Omega_{E} [\vec{\pi}] [((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\chi_i))_{i \in [l]}].
% \end{align*}
% For each $i \in [l]$ let $T_i = [n]^{c_1} \times , \ldots, \times
% [n]^{c_{r_i}}$. Let $T$ be a function that maps $i \in [l]$ to $T_i$. where
% $c_{j}$ is the arity of ...x
% \begin{align*}
%   \psi^{\eta}_{n, k; \beta}(\vec{x}) := \bigvee_{p_1, \ldots, p_{\vert \vec{\pi} \vert}, e \leq M}[&(\bigwedge_{i \leq \vert \vec{\pi}\vert} \psi^{\pi_{i}}_{n, p_i; \beta}(\vec{x})) \\ &\land Q_{E, T ; (p_1, \ldots, p_n); e} ((\vec{x}^{j, \vec{t}}_1, \ldots, \vec{x}^{j, \vec{t}}_{r_i}) \cdot (\chi_{i, \vec{t}})_{ n; \beta})_{j \in [l], \vec{t} \in T_j}]
% \end{align*}


% \end{proof}
Let $L$ be a logic with constant numeric-width. Let $\rho$ be a vocabulary. We
say that a $\PT$-uniform family of $L[\rho]$-substitution programs $(\Phi_n)_{n
  \in \nats}$ is \emph{bounded} if there is a constant $k \in \nats$ such that
for each $n \in \nats$ the numeric-width and length of each formula in $\Phi_n$
is less than $k$.

\begin{lem}
  Let $\rho$ be a vocabulary and let $\setop$ be a set of normal operators such
  that $\FO^{\nats}(\setop)$ has constant numeric-width. Let $\setquant$ be the
  corresponding set of quantifiers. If a query can be defined by a bounded
  $\PT$-uniform family of $\FO^{\nats} (\setop)[\rho]$-substitution programs
  then it can be defined by a $\PT$-uniform family of $\FO
  (\setquant)[\rho]$-substitution programs with constant width.
\end{lem}
\begin{proof}
  Let $\Theta := (\Theta_{n})_{n \in \nats}$ be a bounded $\PT$-uniform family
  of $\FO^{\nats}(\setop)[\rho]$-substitution programs. For each $n \in \nats$
  let $M_n := \dom(\Theta_n)$. For each $n \in \nats$, $i \in M_n$ let
  $\vec{x}^n_i$ and $\vec{\mu}^n_i$ be the free element variables and number
  variables in $\Theta_n(i)$. Let $V^n_i$ be a mixed-sort second-order variable
  with type $(\vec{x}^n_i, \vec{\mu}^n_i)$. We think of $V^n_i$ as the
  second-order variable associated with the formula $\Theta_n(i)$. For each $n
  \in \nats$, $i \in M_n$, and $\vec{a} \in [n]^{\vert \vec{\mu}^n_i \vert}$ let
  $V^n_{i ; \vec{a}}$ be an element-sort second-order variable with arity $\vert
  \vec{x}^n_i\vert$. Let $\theta_{n, i}(\vec{x}^n_i, \vec{\mu}^n_i; \vec{V}^n_i)
  := \Theta_n(i)$, where $\vec{V}^n_i = (V^n_j)_{j > i}$. Let
  $\boldsymbol{\theta}_{n, i} := \{\theta_{n, i; \beta} (\vec{x}^n_i
  ,\vec{\mu}^n_i ; \vec{W}^n_{i}) : \vec{a} \in [n]^{\vert \vec{\mu}^n_i
    \vert}\}$ be a translation of $\theta_{n, i}$ for $n$, where $\vec{W}^n_i =
  \{V^{n}_{j; \vec{a}} : j \in M_n, j > i, \vec{a} \in [n]^{\vert \vec{\mu}^n_j
    \vert}\}$. Importantly, it follows from
  Lemma~\ref{lem:translate-program-line} and the fact that $\Theta$ is bounded
  that there is a an algorithm that runs in time polynomial in $n$ that takes a
  formula $\theta_{n, i}$ and outputs the translation $\boldsymbol{\theta}_{n,
    i}$ for $n$.

  Let $M_n' = \{(i, \vec{a}) : i \in M_n, \vec{a} \in [n]^{\vert \vec{\mu}^n_i
    \vert}\}$. Let $\Theta_n' : M_n' \ra \FO(\setquant)[\rho]$ be defined by
  $\Theta_n' (i, \vec{a}) := \theta_{n, i; \beta}$, where $\beta$ maps
  $\vec{\mu}^n_i$ to $\vec{a}$, for each $(i, \vec{a}) \in M_n'$. Since $M_n'$
  is a product of linearly ordered sets we can define a lexographical order on
  $M_n'$. Let $i, j \in M_n$ and suppose $i > j$. Then, from the definition of a
  substitution program, $\theta_{n, i}$ does not contain the second-order
  variable $V^n_{j}$. It follows that for all $\vec{a} \in [n]^{\vert
    \vec{\mu}^n_i \vert}$ and $\vec{b} \in [n]^{\vert \vec{\mu}^n_j \vert}$ the
  translation $\theta_{n, i ; \beta}$, where $\beta$ maps $\vec{\mu}^n_i$ to
  $\vec{a}$, does not contain any second-order variable $V^n_{j ; \vec{b}}$. It
  follows that $\Theta_n'$ is a well-formed substitution program.

  \begin{claim}
    For each $n \in \nats$ let $\theta_n(\vec{x}^n_1, \vec{\mu}^n_1)$ be the
    flattening of $\Theta_n$ and for each $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_1\vert}$ let $\theta_{n, \vec{c}}'(\vec{x}^n_1)$ be the
    flattening of $\Theta_n'$ at $(1, \vec{c})$. Let $\mathcal{A} \in \fin[\rho,
    n]$. Let $\alpha \in A^{\vec{x}^n_1}$ and let $\beta \in
    [n]^{\vec{\mu}^n_1}$. Then $\mathcal{A} \models \theta_n [\alpha, \beta]$
    if, and only if, $\mathcal{A} \models \theta_{n,
      \beta(\vec{\mu}^n_1)}[\alpha]$.
  \end{claim}
  \begin{proof}
    Let $n \in \nats$. For each $i \in M_n$ and $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_i\vert}$ let $\phi_{n, i}$ be the flattening of $\Theta_n$ at
    $i$ and let $\phi_{n, (i, \vec{c})}'$ be the flattening of $\Theta_n'$ at
    $(i, \vec{a})$. Let $\mathcal{A} \in \fin[\rho, n]$. We will prove by
    backwards induction that for each $i \in M_n$, $\vec{c} \in [n]^{\vert
      \vec{\mu}^n_i\vert}$, assignments $\alpha \in A^{\vec{x}^n_i}$ and $\beta$
    that maps $\vec{\mu}^n_i$ to $\vec{c}$, we have that $\mathcal{A} \models
    \phi_{n, i}[\alpha, \beta]$ if, and only if, $\mathcal{A} \models \phi_{n,
      (i, \vec{c})}[\alpha]$.

    % Let $n \in \nats$, $(i, \vec{a}) \in M_n'$ let $M_{n, (i, \vec{a})}' =
    % \{(j,
    % \vec{b}) : (i, \vec{a}) \leq (j, \vec{b})\}$ and let $M_{n, i} = \{j : i
    % \leq j\}$. Let $\Psi_{n, (i, \vec{a})}'$ be the restriction of $\Theta_n'$
    % to $M_{n, (i, \vec{a})}$ and let $\Psi_{n, i}$ be the restriction of
    % $\Theta_n$ to $M_{n, i}$. We now prove that for each $(i, \vec{a}) \in
    % M_n'$
    % the flattening of $\Psi_{n, \vec(i, \vec{a})}'$ defines the same query as
    % the flattening of $\Psi_{n, i}$ with the assignment that $\vec{\mu}^n_i$
    % to
    % $\vec{a}$. The proof is by backwards induction. Let $i \in M_n$ and let
    % $\vec{a} \in [n]^{\vert \vec{\mu}^n_i \vert}$. Let $\phi_{n, i}$ be the
    % flattening of $\Phi_{n, i}$ and let $\phi_{n, (i, \vec{a})}$ be the
    % flattening of $\Phi_{n, (i, \vec{a})}$. Let $\mathcal{A} \in \fin[\rho,
    % n]$
    % and suppose we have assignments $\alpha \in A^{\vec{x}^n_i}$ and $\beta$
    % that maps $\vec{\mu}^n_i$ to $\vec{a}$.

    We begin with the base case. Suppose $i$ is the maximum value in $M_n$.
    There are no second-order variables in $\Theta_n(i)$ and hence, from the
    definition of a translation for $n$, that no second-order variables in
    $\Theta_n'(i, \vec{c})$. It follows that $\phi_{n, i} = \Theta_n(i)$ and
    $\phi_{n, (i, \vec{c})}' = \Theta_{n}(i, \vec{c})$. Moreover, from the
    definition of a translation for $n$, we have that $\mathcal{A} \models
    \Theta_{n}(i)[\alpha, \beta]$ if, and only if, $\mathcal{A} \models
    \Theta_{n}'(i, \vec{c}) [\alpha, \beta]$. The base case follows.

    Suppose $i$ is not the maximal value in $M_n$ and the proposition holds for
    all $j > i$. Let $\gamma$ an assignment that maps the mixed-sort
    second-order variable $V^n_j$ to the relation defined by $(\phi_{n,
      j})^{\mathcal{A}}$ for each $j > i$. Let $\gamma'$ be the assignment that
    maps each single-sort second-order variable $V^n_{j, \vec{c}}$ to the
    relation defined by $(\phi_{n, (j, \vec{c})})^{\mathcal{A}}$ for each $j >
    i$ and $\vec{c} \in [n]^{\vec{\mu}^n_j}$.

    Let $j > i$, $\vec{c}\in [n]^{\vert \vec{\mu}^n_j \vert}$, $\alpha \in
    A^{\vec{\mu}^n_j}$ and $\beta = \beta^{\vec{\mu}^n_j}_{\vec{c}}$. We notice
    the following. From the induction hypothesis we have that $\mathcal{A}
    \models \phi_{n, (j, \vec{c})}' [\alpha]$ if, and only if, $\mathcal{A}
    \models \phi_{n, j}[\alpha, \beta]$, where $\beta$ maps $\vec{\mu}^n_j$ to
    $\vec{c}$. It follows from the definition of $\gamma$ and $\gamma'$ that
    $(\vec{a}, \vec{c}) \in V^n_{j}$ if, and only if, $\vec{a} \in V^n_{j,
      \vec{c}}$. We have
    \begin{align*}
      \mathcal{A} \models \phi_{n, i} [\alpha, \beta] \iff \mathcal{A} \models \theta_{n, i}[\alpha, \beta, \gamma] \iff \mathcal{A} \models \theta_{n, i ; \beta}[\alpha, \gamma'] \iff \mathcal{A} \models \phi_{n, (i, \vec{c})}[\alpha],
    \end{align*}
    where the first and third equivalences follow from the definition of a
    flattening and the second equivalence follows from the definition of a
    translation for $n$. The result follows by induction.
  \end{proof}

  We have for each $n \in \nats$ that $\Theta_n(1)$ has no free number
  variables. Let $\theta_n$ and $\theta_n'$ be the flattening of $\Theta_n$ and
  $\Theta_n'$. We have from the definition of $\Theta$ that $\theta_n$ has no
  free number variables, and so, from the above claim, we have that $\mathcal{A}
  \models \theta_n[\alpha]$ if, and only if $\mathcal{A} \models
  \theta_n'[\alpha]$ for each $\mathcal{A} \in \fin[\rho, n]$ and assignment
  $\alpha \in A^{\vec{x}^n_1}$. It follows that $\Theta'$ defines the same query
  as $\Theta$.

  Since $\Theta$ is $\PT$-uniform the function that maps $n$ to $\Theta_n$ is
  computable in time polynomial in $n$. Moreover, the function that maps any
  $\Theta_n(i)$ (for $n \in \nats$, $i \in M_n$) to the translation of
  $\Theta_n(i)$ for $n$ is computable in time polynomial in $n$. It follows that
  the function $n \mapsto \Theta_n'$ is computable in time polynomial in $n$.
  Since there is a constant bound on the formula-length, and hence the width, of
  $\Theta$, it follows from Lemma~\ref{lem:translate-program-line} that there is
  a constant bound on the width of $\Theta' := (\Theta_n')_{n \in \nats}$.

  
  It follows that $(\Theta_n')_{n \in \nats}$ is a $\PT$-uniform family of
  $\FO(\setquant_{\setop})[\rho]$-substitution with constant width and that
  define the same query as $\Theta$.
\end{proof}

\subsection{Infinitary Logics}
Let $\setquant$ be a set of extended quantifiers. We define the extension of
$\mathcal{L}$ by $\setquant$ by extending the formula formation rules for
$\mathcal{L}$ with the following rule:

\begin{textbox}[14.0cm]
  Let $Q^{E, \ar}_{\vec{a}, n} \in \setquant$, $i \in [r]$, $l \in [r_i]$ let
  $c^i_l = \ar(\zeta(R_i)(l), 2)$ and let $T^i_n := [n]^{c^i_l} \times , \ldots,
  \times [n]^{c^i_{r_i}}$. Let $T_n$ be the function that maps $i \in [r]$ to
  $T^i_n$. Let $\Upsilon_i : T^i_n \ra L(Q^{E, \ar}_{\vec{p}, n})$. For each $i
  \in [r]$ and $l \in [r_i]$ let $s = \zeta (R_i)(l)$ and let $\vec{x}^i_l$ be
  an $\ar(s, 1)$-length tuple of element variables. Then $Q^{E, \ar}_{\vec{p},
    n} [(\vec{x}^i_1, \ldots, \vec{x}^i_{r_i}) \cdot \Upsilon_i]_{i \in [r]}$ is
  a formula in $\mathcal{L}(\setquant)$.
\end{textbox}

\begin{prop}
  Let $\rho$ be a vocabulary and $\setop$ be a set of operators. Let $\setquant$
  be the corresponding set of extended quantifiers. Then each query definable in
  $\FP^{\nats}(\setop)[\rho]$ can be defined by a $\PT$-uniform family of
  $\FO(\setquant)[\rho]$ substitution programs and each query definable by a
  $\PT$-uniform family of $\FO(\setquant)[\rho]$ is definable by a formula of
  $\mathcal{C}^{\omega}(\setquant)[\rho]$.
\end{prop}
\begin{proof}
  The first part of the result follows from Lemma~\ref{}. Let $(\Phi_n)_{n \in
    \nats}$ be a $\PT$-uniform family of $\FO(\setquant)[\rho]$-substitution
  programs with constant width. Let $(\phi_n)_{n \in \nats}$ be such that
  $\phi_n$ is the flattening of $\Phi_n$ for all $n \in \nats$. Let $\theta
  (\vec{x}) = \bigwedge_{n \in \nats} (\exists^{=n} \, x = x) \land \phi_n
  (\vec{x})$. It follows from the fact that $\Phi$ has constant width that
  $\theta \in \mathcal{L}^\omega(\setquant)$. Moreover, $\theta$ and
  $(\Phi_n)_{n \in \nats}$ define the same query. The second part of the result
  follows.
  % **problem, we need some sort of width condition
  % **problem, we need counting
  % **problem, each $\phi_n$ must have the same set of free variables
\end{proof}

We should work through two examples. Let $\setop_C$ be the set of all counting
operators.

\section{Translating Formulas to Circuits}

% \begin{lem}
%   Let $\setquant$ be a set of quantifiers. There is a function that maps a
%   $\FO(\setquant)$ formula $\theta(\vec{x})$ and $n \in \nats$ to a circuit
%   $C_n$ that translates $\theta(\vec{x})$ for $n$. This function can be
%   computed by an algorithm that runs in time $p(n^{\width(\theta)} \vert \cl
%   (\theta)\vert)$, for some polynomial $p$.
% \end{lem}

% \begin{prop}
%   Let $\rho$ be a vocabulary and let $\setquant$ be a family of quantifiers.
%   Let $\BB^{\setquant}$ be the basis associated with $\setquant$. If a query
%   can be defined by a $\PT$-uniform family of $\FO(\setquant)$ substitution
%   programs then it can be defined by a $\PT$-uniform family of transparent
%   symmetric $(\BB^{\setquant}, \rho)$-circuits that define $Q$.
% \end{prop}
% \begin{proof}
% \end{proof}

\begin{definition}
  Let $E : \nats^m \times \fin[\tau] \ra \{0,1\}$ be the evaluation function of
  some operator. We associate with $E$ and $\vec{a} \in \nats^m$ a basis
  $\BB_{\vec{m}} = \{F_{\vec{a}}: \{0,1\}^{\ind(\tau, \vec{a})}\ra \{0,1\} :
  \vec{a} \in \nats^{\vert S \vert}, \forall \mathcal{A} \in \str{\tau,
    \vec{a}}, F_{\vec{a}}(\mathcal{A}) = E(\vec{m}, \mathcal{A})\}$. Let $\setop$ Let
  $\setop$ be a set of normal operators.
\end{definition}

\begin{lem}
  Let $\rho$ and $\rho'$ be vocabularies such that $\rho \cap \rho' =
  \emptyset$. Let $\setquant$ be a set of extended quantifiers. Let $\BB$ be the
  basis associated with $\setquant$. There is a function that takes as input a
  number $n \in \nats$ and $\FO(\setquant)[\rho \cup \rho']$-formula
  $\theta(\vec{x})$ and outputs a symmetric $(\BB, \rho \cup \rho')$-circuit
  $C_n$ that translates $\theta(\vec{x})$ for $n$. Moreover, this function is
  computable and there is a polynomial in $p$ such that for an input $(n,
  \theta(\vec{x}))$ the algorithm computing this function terminates in at most
  $p(n^{\width(\theta)}\vert \cl{\theta} \vert)$ many steps.
  \label{lem:translating-FOquant-to-formulas}
\end{lem}
\begin{proof}
  Let $\tau$ be the vocabulary of $\theta(\vec{x})$. Let $k := \width(\theta)$.
  Suppose first that $\tau$ is empty, so all of the atomic formulas in
  $\theta(\vec{x})$ are of the form $y_1 = y_2$, where $y_1$ and $y_2$ are
  variables. It can be shown that for $\vec{a} \in n^k$, we can evaluate $[n]
  \models \theta[\alpha^{\vec{x}}_{\vec{a}}]$ in time polynomial in $n^{k} \vert
  \cl{\theta} \vert$. Let $f : [n]^k \rightarrow \{0,1\}$ be defined such that
  $f (\vec{a}) = 1$ if, and only if, $[n] \models
  \theta[\alpha^{\vec{x}}_{\vec{a}}]$. Let $C := \langle G, \Sigma, \Omega,
  \Lambda, L \rangle$, where
  \begin{myitemize}
  \item $G = \{g_0, g_1\} \cup \{g_{\vec{a}} : \vec{a} \in [n]^{k}\}$,
  \item $\Sigma (g_0) = 0$, $\Sigma (g_1) = 1$ and $\Sigma (g_{\vec{a}}) =
    \AND[1]$ for all $\vec{a} \in [n]^k$,
  \item $\Omega : [n]^k \rightarrow G$ is defined by $\Omega(\vec{a}) =
    g_{\vec{a}}$ for all $\vec{a} \in [n]^k$,
  \item $\Lambda = \emptyset$, and
  \item for $\vec{a} \in [n]^k$, $L(g_{\vec{a}}) : [1] \rightarrow G$ is defined
    by $L(g_{\vec{a}})(1) = g_{f(\vec{a})}$.
  \end{myitemize}
  
  Since $C$ has symmetric gates, $C$ is transparent. Notice that, since
  $\theta(\vec{x})$ defines a query on structures over the empty vocabulary, we
  have for all $\vec{a} \in [n]^k$, $\sigma \in \sym_n$, $f(\sigma \vec{a}) =
  f(\vec{a})$. For $\sigma \in \sym_n$, let $\pi_\sigma : G \rightarrow G$ be a
  bijection that fixes the constant gates and such that $\pi_{\sigma}
  g_{\vec{a}} = g_{\sigma \vec{a}}$ for all $\vec{a} \in [n]^k$. Then
  $\pi_\sigma \Omega (\vec{a}) = \pi_\sigma g_{\vec{a}} = g_{\sigma \vec{a}} =
  \Omega (\sigma \vec{a})$. It follows that $\pi_\sigma$ is an automorphism of
  the circuit extending $\sigma$. We thus have that $C$ translates
  $\theta(\vec{x})$ for $n$.
  
  Suppose now $\tau$ is not empty. We first define a transformation of the
  formula $\theta$ to an equivalent formula $\lambda$ which has the property
  that the \emph{natural} translation of $\lambda$ to a circuit (given later) is
  transparent. Let $R \in \tau$. We first define two helper formulas. For a
  variable $y$ let $\op{no-op}(y) := (R(y, y) \lor (\neg R(y, y)))$. For a
  sequence of variables $\vec{y} = (y_1, \ldots, y_m)$ let $\op{tag} (\vec{y})
  := (\op{no-op}(y_1) \land (\op{no-op}(y_2) \land ( \op{no-op}(y_2) \land (
  \ldots \land (\op{no-op}(y_m)) \ldots))))$. Now, let $\lambda (\vec{x})$ be
  the formula constructed from $\theta(\vec{x})$ by replacing each sub-formula
  $\psi(\vec{y})$ of the form $\rank^r_p \vec{w} \vec{z} . \phi$ with the
  formula $\rank^r_p \vec{w}\vec{z} . ((\forall u . u = u) \land \phi) \land
  \op{tag}(\vec{w} \cup \vec{z})$. Since we always replace a subformula $\phi$
  with a logically equivalent formula, it follows that $\lambda (\vec{x})$ and
  $\theta (\vec{x})$ are equivalent. The intuition is that $\op{tag}(\vec{w}
  \cup \vec{z})$ appends a tower of conjunctions of tautologies, with each
  tautology referencing a unique variable from $\vec{w} \cup \vec{z}$. When we
  construct the circuit, this tower of tautologies will act to `tag' each input
  to the rank gate with a unique gadget. We then show that the presence of these
  gadgets ensures that no two inputs to a rank gate are
  syntactically-equivalent, and so the circuit is transparent.

  We note that $\lambda(\vec{x})$ has the same width as $\theta(\vec{x})$, and
  that the number of sub-formulas in $\lambda(\vec{x})$ is at most $\vert
  \cl{\theta} \vert (5 + 4\width(\theta))$. We now construct a circuit $C$ and
  show that $C$ translates $\lambda(\vec{x})$ (and hence $\theta(\vec{x})$) at
  $n$.

  Fix $n \in \nats$. Let $\psi \in \FOrk[\tau]$ and $\alpha \in [n]^{\free
    {\psi}}$. We let $\psi[\alpha]$ be the result of substituting each
  occurrence of the free variable $y \in \free{\psi}$ in $\psi$ with
  $\alpha(y)$. If $\psi$ is of the form $y_1 = y_2$, then $\psi [\alpha] = 1$ if
  $\alpha(y_1) = \alpha (y_2)$ and $\psi[\alpha] = 0$ otherwise. We call
  $\psi[\alpha]$ a \emph{ground formula}. For each $\psi \in \cl{\theta}$ let
  $G_\psi := \{g_{\phi[\alpha]} : \alpha \in [n]^{\free{\psi}} \}$. Let $G :=
  \bigcup_{\psi \in \cl{\lambda}} G_{\psi}$. We define $\Sigma$, $\Lambda$ and
  $L$ as follows. Let $\Sigma (g_1) = 1$ and $\Sigma (g_0) = 0$. Let $g :=
  g_{\psi[\alpha]} \in G$.
  
  \begin{myitemize}
  \item If $\psi[\alpha] = T(\vec{a})$ for some $T \in \tau$ and $\vec{a} \in
    \arty(T)$, then $\Sigma (g) = T$ and $\Lambda_T (g) = \vec{a}$.
  \item If $\psi[\alpha]$ is $0$ or $1$, then $\Sigma (g) = \psi[\alpha]$.
  \item If $\psi$ is of the form $\rank^r_p \vec{w} \vec{z}. \phi$, let $A =
    [n]^{\vert \vec{w}\vert}$ and $B = [n]^{\vert \vec{z}\vert}$, and $\Sigma
    (g_{\psi, \alpha}) = \rank[A, B]$. Let $L(g) : A \times B \rightarrow G$ be
    defined by $L(g)(\vec{a},\vec{b}) = g_{\phi[\beta]}$, where $\beta \in
    [n]^{\free{\phi}}$, and where $\alpha$, and the assignments
    $\alpha^{\vec{w}}_{\vec{a}}$ and $\alpha^{\vec{z}}_{\vec{b}}$, are
    compatible with $\beta$.
  \item If $\psi$ is of the form $Q z . \phi(\vec{y}, z)$, for $Q \in \{\forall,
    \exists\}$, then if $Q = \forall$ we have $\Sigma (g) = \AND[n]$, otherwise
    $\Sigma (g) = \OR[n]$. Let $L(g) : [n] \rightarrow G$ be defined for $i \in
    [n]$ by $L(g)(i) = g_{\phi[\beta_i]}$, where $\beta_i \in
    [n]^{\free{\psi}}$, and where both $\alpha$ and $\alpha^{z}_{i}$ are
    compatible with $\beta_i$.
  \item If $\psi$ is of the form $\phi_1 \land \phi_2$, then $\Sigma(g) =
    \AND[2]$ and $L(g) : [2] \rightarrow G$ is defined for $i \in [2]$ by
    $L(g)(i) = g_{\phi_i[\beta_i]}$, where $\beta_i \in [n]^{\free{\psi}}$ and
    $\beta_i$ is compatible with $\alpha$. The same approach is used in the
    disjunctive case.
  \item if $\psi$ is of the form $\neg \phi$ then $\Sigma (g) = \neg$ and $L(g):
    [1] \rightarrow G$ is defined by $L(g)(1) = g_{\phi[\alpha]}$.
  \end{myitemize}

  Let $\Omega : [n]^k \rightarrow G$ be defined by $\Omega (\vec{a}) =
  g_{\lambda [\alpha]}$, where $\alpha := \alpha^{\vec{x}}_{\vec{a}}$, for all
  $\vec{a} \in [n]^k$. Suppose $\Omega (\vec{a}) = g_c$, where $ c \in {0,1}$.
  Then $\lambda$ (and $\theta$) is of the form $(y_1 = y_2)$. But then the
  vocabulary of $\theta$ is empty, contradicting our assumption. Suppose $\Omega
  (\vec{a}) = \Omega(\vec{b})$ for $\vec{a}, \vec{b} \in [n]^k$. Then
  $g_{\lambda[\alpha^{\vec{x}}_{\vec{a}}]} =
  g_{\lambda[\alpha^{\vec{x}}_{\vec{b}}]}$, and so $\alpha^{\vec{x}}_{\vec{a}} =
  \alpha^{\vec{x}}_{\vec{b}}$, and $\vec{a} = \vec{b}$. It follows that $\Omega$
  is injective. Let $T \in \tau$, and let $g_{\psi[\alpha]}, g_{\phi[\beta]} \in
  G$ be such that $\Lambda_T (g_{\psi[\alpha]}) = \Lambda_T (g_{\phi[\beta]})$.
  Then $\psi[\alpha] = \Lambda_T (g_{\psi[\alpha]}) = \Lambda_T
  (g_{\phi[\beta]}) = \phi[\beta]$, and so $g_{\psi[\alpha]} = g_{\phi[\beta]}$.
  It follows that $\Lambda_T$ is injective. We thus have that $C := \langle G,
  \Omega, \Sigma, \Lambda, L \rangle$ is a circuit of order $n$.

\begin{claim}
  The circuit $C$ is symmetric.
\end{claim}
\begin{proof}
  Let $\pi_\sigma : G \rightarrow G$ be a function that fixes constant gates and
  such that if $g_{\psi[\alpha]} \in G$ is a non-constant gate then
  $\pi_{\sigma} g_{\psi [\alpha]} = g_{\psi[\sigma \alpha]}$. It is easy to see
  that $\pi_\sigma$ is a bijection. We now show that $\pi_{\sigma}$ is an
  automorphism of the circuit extending $\sigma$. Let $g_{\psi[\alpha]} := g \in
  G$. Since $\pi_{\sigma}$ acts on gates by permuting the associated assignment,
  but has no effect on the associated sub-formula, we have $\Sigma(g) = \Sigma
  (\pi_{\sigma} g)$. Suppose $g$ is an input gate. If $g$ is a constant gate
  then $\pi_\sigma g = g$. If $g$ is a relational gate, then $\psi$ is of the
  form $T(\vec{y})$ for some relation symbol $T$ and $\Lambda_T
  (g_{\psi[\alpha]}) = \alpha \vec{y}$. It follows that $\Lambda_T (\pi_{\sigma}
  g_{\psi[\alpha]}) = \Lambda_T( g_{\psi[\sigma \alpha]}) = \sigma \alpha
  \vec{y} = \sigma \Lambda_T (g_{\psi[\alpha]})$. Suppose $g$ is an internal
  gate. From the construction of the circuit we have that if $g_{\phi[\beta]}$
  is a child of $g$ then $\phi$ must be an immediate sub-formula of $\psi$ and
  so $g_{\phi[\sigma \beta]}$ is a child of $g_{\psi[\sigma \alpha]} =
  \pi_{\sigma} g$. It follows that $H_{\pi_\sigma g} = \pi_\sigma H_g$. If $g$
  is a symmetric gate, this is sufficient to conclude that $\pi_{\sigma} L(g)$
  is isomorphic to $L(\pi_{\sigma} g)$. If $g$ is not a symmetric gate then it
  must be a rank gate, and so $\psi$ is of the form $\rank^r_p \vec{w} \vec{z}
  \phi$. Let $A$ and $B$ be defined as in our definition of $C$, and let
  $\vec{a} \in A$ and $\vec{b} \in B$. Note that $\pi_\sigma L(g) (\vec{a},
  \vec{b}) = \pi_{\sigma} g_{\phi[\beta]}$, where $\beta \in [n]^{\free {\phi}}$
  is compatible with $\alpha$, $\alpha^{\vec{w}}_{\vec{a}}$ and
  $\alpha^{\vec{z}}_{\vec{b}}$. It follows that $\sigma \beta$ is compatible
  with $\sigma \alpha$, $\sigma \alpha^{\vec{w}}_{\vec{a}} =
  \alpha^{\vec{w}}_{\sigma \vec{a}}$ and $\alpha^{\vec{z}}_{\vec{b}} =
  \alpha^{\vec{z}}_{\sigma \vec{b}}$. We thus have that $L(\pi_{\sigma}
  g)(\sigma \vec{a}, \sigma \vec{b}) = g_{\phi[\sigma \beta]} = \pi_{\sigma}
  g_{\phi[\beta]} = \pi_{\sigma} L(g)(\vec{a}, \vec{b})$. Suppose $g$ is an
  output gate, and let $\vec{a} \in [n]^k$ and $\alpha :=
  \alpha^{\vec{x}}_{\vec{a}}$. We have that $\pi_{\sigma} \Omega (\vec{a}) =
  \pi_\sigma g_{\lambda[\alpha]} = g_{\lambda[\sigma \alpha]} = \Omega (\sigma
  \alpha \vec{x}) = \Omega (\sigma \vec{a})$. This concludes the proof of the
  claim.
\end{proof}
  
Let $\mathcal{A}$ be a $\tau$-structure with universe $U$ of size $n$ and let
$\gamma \in [n]^{\underline{U}}$. It can be shown that for all $\psi \in
\cl{\lambda}$ and $\alpha \in U^{\free{\psi}}$, $\mathcal{A} \models
\psi[\alpha]$ if, and only if, $C[\gamma \mathcal{A}](g_{\psi[\gamma\alpha]}) =
1$. It follows that $\vec{a} \in U^k$ is an element of $Q(\theta(\vec{x}))$ if,
and only if, $\mathcal{A} \models \lambda[\alpha^{\vec{x}}_{\vec{a}}]$ if, and
only if, $C[\gamma \mathcal{A}](g_{\lambda[\alpha^{\vec{x}}_{\gamma \vec{a}}]})
= 1$. Since $g_{\lambda [\alpha^{\vec{x}}_{\gamma \vec{a}}]} = \Omega (\gamma
\vec{a})$, we have that $C$ computes the query defined by $\theta(\vec{x})$ on
structures of size $n$.

\begin{claim}
  The circuit $C$ is transparent.
\end{claim}
\begin{proof}
  If $C$ has symmetric gates then $C$ is transparent. Suppose $C$ contains a
  non-symmetric gate. Let $g_{\psi[\alpha]}\in G$ be a rank gate and suppose
  $\psi$ is of the form $\rank^r_p \vec{w} \vec{z}. \zeta$, where $\zeta =
  \zeta_1 \land \zeta_2$ and where, $\zeta_1 = ((\forall u. u = u) \land \phi)$,
  and $\zeta_2 = \op{tag}(\vec{w} \cup \vec{z})$. Let $\beta_1 , \beta_2 \in
  [n]^{\free{\zeta}}$ both be compatible with $\alpha$, and let $h_1 =
  g_{\zeta[\beta_1]}$ and $h_2 = g_{\zeta[\beta_2]}$. For $i \in [2]$ we have
  that $H_{h_i} = \{g_{\zeta_1[\beta_i]}, g_{\zeta_2[\beta_i]}\}$. Since
  $\zeta_1$ contains a sub-formula of the form $(u = u)$, while $\zeta_2$
  contains no sub-formula with equality, we have that a child of a child of
  $g_{\zeta_1[\beta_1]}$ is a constant gate while none of the children of the
  children of $g_{\zeta_2[\beta_2]}$ are constant gates, and thus $g_{\zeta_1
    [\beta_1]} \not\equiv g_{\zeta_2[\beta_2]}$. It follows that $h_1 \equiv
  h_2$ if, and only if, both $g_{\zeta_1 [\beta_1]} \equiv g_{\zeta_1
    [\beta_2]}$ and $g_{\zeta_2[\beta_1]} \equiv g_{\zeta_2[\beta_2]}$.
  Moreover, the fact that $\zeta_2$ contains an ordered sequence of conjunctions
  of tautologies, with each tautology referencing a different variable,
  guarantees that $g_{\zeta_2[\beta_1]} \equiv g_{\zeta_2[\beta_2]}$ if, and
  only if, $\beta_1$ and $\beta_2$ agree on $\free{\zeta_2}$. But we already
  have that $\beta_1$ and $\beta_2$ are compatible with $\alpha$, and so agree
  on all other free variables. It follows that $g_{\zeta_2[\beta_1]} \equiv
  g_{\zeta_2[\beta_2]}$ if, and only if, $\beta_1 = \beta_2$. This allows us to
  conclude that $g_{\zeta[\beta_1]} \equiv g_{\zeta[\beta_2]}$ if, and only if,
  $\beta_1 = \beta_2$ if, and only if, $g_{\zeta[\beta_1]} =
  g_{\zeta[\beta_2]}$. It follows that $L(g_{\psi[\alpha]})$ is injective, and
  no two child gates of $g_{\psi[\alpha]}$ are syntactically-equivalent. We
  conclude that $g_{\psi[\alpha]}$ has unique labels, and so $C$ is transparent.
\end{proof}

We note that $\vert C \vert \leq n^{\width(\lambda)} \vert \cl{\lambda} \vert
\leq n^{\width(\theta)} \vert \cl{\theta} \vert (5 + \width(\theta))$. It is not
hard to see that $C$ (and $\lambda(\vec{x})$) can be constructed in a number of
steps bounded by a polynomial in the size of $C$. This completes the proof of
the result.
\end{proof}

\begin{prop}
  Let $\rho$ is a vocabulary. Let $\setquant$ be a set of extended quantifiers
  and let $\BB$ be the associated basis. Each query definable by a $\PT$-uniform
  family of $\FO(\setquant)[\rho]$ substitution programs is definable by a
  $\PT$-uniform family of transparent symmetric $(\BB, \rho)$-circuits $(C_n)_{n
    \in \nats}$.
  \label{prop:translating-programs-to-circuits}
\end{prop}
\begin{proof}
  
\end{proof}

\begin{thm}
  Let $\rho$ is a vocabulary. Let $\setop$ be a set of unrestricted operators
  and let $\BB$ be the associated basis. Each query definable in
  $\FP(\setop)[\rho]$ is definable by a $\PT$-uniform family of transparent
  symmetric $(\BB, \rho)$-circuits $(C_n)_{n \in \nats}$.
  \label{thm:translating-FP-formulas-to-circuits}
\end{thm}

% \section{rough nonsense}

% \subsection{Generalised Many-Sorted Mixed-Type Quantifiers}
% Let $\tau = (\{R_1, \ldots, R_{l_1}\},\{F_1, \ldots, F_{l_2} \}, \{s_1,
% \ldots, s_{q}\}, \nu)$ be a many-sorted vocabulary with number-valued function
% symbols. Let $\mathcal{K}$ be a class of $\tau$-structures.

% \begin{align*}
%   Q_{\mathcal{K}}[\vec{\phi}^D, \vec{\phi}^{\approx}]  [&((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\theta_i))_{i \in [l_1]}\\&((\vec{y}^j_1 \vec{\nu}^j_1, \ldots, \vec{y}^j_{f_j} \vec{\nu}^j_{f_j})(\eta_i))_{i \in [l_2]}]
% \end{align*}

% Let $B_1, \ldots , B_{q}$ be a sequence of sets such that $B_i = \phi^D_i /
% \phi^{\approx}_i$. Let $R^{B}_i$ be defined such that $(e_1, \ldots , e_{r_i})
% \in R^{B}_i$ if, and only if, there exists $(\vec{a}_1 \vec{m}_1, \ldots ,
% \vec{a}_{r_i} \vec{m}_{r_i})$ such that $\vec{a}_j \vec{m}_j \in e_j$ for all
% $j \in [r_i]$ and $\mathcal{A} \models \theta_i [\vec{a}_1\vec{m}_1, \ldots,
% \vec{a}_{r_i} \vec{m}_{r_i}]$. Let $F^{B}_i$ be defined such that $F^B_i (e_1,
% \ldots, e_{f_i}) = k$ there exists $(\vec{a}_1, \vec{m}_1, \ldots ,
% \vec{a}_{r_i} \vec{m}_{r_i})$ such that $\vec{a}_j \vec{m}_j \in e_j$ for all
% $j \in [f_i]$ where $\mathcal{A} \models (k = \nu_i [\vec{a}_1, \vec{m}_1,
% \ldots , \vec{a}_{r_i} \vec{m}_{r_i}])$. Let $\mathcal{B}$ be the structure
% defined from the above. We have $\mathcal{A} \models Q_{\mathcal{K}}...$ if,
% and only if, $\mathcal{B} \in \mathcal{K}$.

% We

% \subsection{Restriction to Operators on Formulas}
% Let $\tau = (\{R_1, \ldots, R_{l_1}\}, \{s_1, \ldots, s_{q}\}, \nu)$ be a
% many-sorted vocabulary. Let $\mathcal{K}$ be a class of $\tau$-structures.

% \begin{lem}
%   Let $\Omega$ be a family of generalised many-sorted operators. Let
%   $L(\Omega)$ be a logic extended by $\Omega$. There is a family of
%   generalised many-sorted operators $\Omega^*$ with no number-terms being
%   operated on such that $L(\Omega)$ and $L(\Omega^*)$ have the same expressive
%   power.
% \end{lem}
% \begin{proof}
%   Let $\oper_E \in \Omega$ where $\dom (E) = \nats^{m_1} \times \{0,1\}^{m_2}
%   \times \fin[\tau]$ and $\tau = (\{R_1, \ldots, R_{l_1}\},\{F_1, \ldots,
%   F_{l_2} \}, \{s_1, \ldots, s_{q}\}, \zeta)$. Let $S^* = S \uplus
%   \{s_{q+1}\}$. For each $F_i$ define a relation symbol $R^*_i$ with arity
%   $\iota (R^^)$ Let $\tau^* = (\{R^{*}_1, \ldots, R^*_{l_1}\})$ where $r^*_i =
%   r$


%   $E^{*} : \dom (E) \ra $, $\oper_{E^{*}}$ be defined as follows.
% \end{proof}

% \subsection{Restriction to Boolean-Valued Operators}


% \begin{align*}
%   Q_{\mathcal{K}}[\vec{\phi}^D, \vec{\phi}^{\approx}]  [&((\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^i_{r_i})(\theta_i))_{i \in [l_1]}\\&((\vec{y}^j_1 \vec{\nu}^j_1, \ldots, \vec{y}^j_{f_j} \vec{\nu}^j_{f_j})(\eta_i))_{i \in [l_2]}]
% \end{align*}


% \subsection{From Operators to Families of Quantifiers}

% \subsection{Quantifiers}
% Let $\tau = (\{R_1, \ldots, R_{l}\}, \{s_1, \ldots, s_{q}\}, \nu)$. Let
% $\mathcal{K}$ be a class of $\tau$-structures. Let $L$ be an extension of
% first-order logic with a number sort. A many-sorted Lindst\"{o}m quantifier
% $Q_{\mathcal{K}}$ of arity $\arty : S \ra \nats^2$ is defined such that

% \begin{align*}
%   Q_{\mathcal{K}}((\phi^D_{s_1}, \ldots, \phi^D_{s_q}), (\vec{t}_{s_1} \ldots \vec{t}_{s_q}), (\phi^{\equiv}_{s_1},
%   \ldots, \phi^{\equiv}_{s_q})) ([\vec{x}^i_1 \vec{\mu}^i_1, \ldots, \vec{x}^i_{r_i} \vec{\mu}^{i}_{r_i} \cdot \theta_i)_{i \in [l]}
% \end{align*}

% such that for each $i \in [l]$, $j \in [r_i]$ if $\nu (R_i)(j) = s$ then
% $\arty(s) = (\vert \vec{x}^i_j \vert, \vert \vec{\mu}^i_j \vert$.

% The semantics of the quantifier is defined as follows. For each $s \in S$ let
% \begin{align*}
%   D_s := \{\vec{a} \vec{m} : \vec{a} \in A^{\arty(s)(1)}, \vec{a} \in \phi^D_s, \vec{m} \in \nats^{\arty(s)(2)} and \vec{m} \leq
%   (t_s)^{\mathcal{A}}\}.
% \end{align*}

% The formulas $\Phi^{\equiv}$ We may define an equivalence relation on $D_s$ by


% Let $A_s := $


% For each $i \in [l]$ let $R^A_i$


\end{document}

→